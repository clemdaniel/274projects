
proj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00001232  000012c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008001be  008001be  00001384  2**0
                  ALLOC
  3 .stab         00003624  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000124a  00000000  00000000  000049a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005bf2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00005c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000016ca  00000000  00000000  00005ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000778  00000000  00000000  000073ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004b1  00000000  00000000  00007b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000046c  00000000  00000000  00007fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000457  00000000  00000000  00008444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b1f  00000000  00000000  0000889b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  000093ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_11>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e3       	ldi	r30, 0x32	; 50
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 3b       	cpi	r26, 0xBE	; 190
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ae eb       	ldi	r26, 0xBE	; 190
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3c       	cpi	r26, 0xC1	; 193
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 95 04 	call	0x92a	; 0x92a <main>
      9e:	0c 94 17 09 	jmp	0x122e	; 0x122e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <defineSongs>:
#include "cmod.h"

// Define songs to be played later
void defineSongs(void) {
  // Reset song
  byteTx(CmdSong);
      a6:	8c e8       	ldi	r24, 0x8C	; 140
      a8:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(RESET_SONG);
      ac:	80 e0       	ldi	r24, 0x00	; 0
      ae:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(4);
      b2:	84 e0       	ldi	r24, 0x04	; 4
      b4:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(60);
      b8:	8c e3       	ldi	r24, 0x3C	; 60
      ba:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(6);
      be:	86 e0       	ldi	r24, 0x06	; 6
      c0:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(72);
      c4:	88 e4       	ldi	r24, 0x48	; 72
      c6:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(6);
      ca:	86 e0       	ldi	r24, 0x06	; 6
      cc:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(84);
      d0:	84 e5       	ldi	r24, 0x54	; 84
      d2:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(6);
      d6:	86 e0       	ldi	r24, 0x06	; 6
      d8:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(96);
      dc:	80 e6       	ldi	r24, 0x60	; 96
      de:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(6);
      e2:	86 e0       	ldi	r24, 0x06	; 6
      e4:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>

  // Start song
  byteTx(CmdSong);
      e8:	8c e8       	ldi	r24, 0x8C	; 140
      ea:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(START_SONG);
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(6);
      f4:	86 e0       	ldi	r24, 0x06	; 6
      f6:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(69);
      fa:	85 e4       	ldi	r24, 0x45	; 69
      fc:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(18);
     100:	82 e1       	ldi	r24, 0x12	; 18
     102:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(72);
     106:	88 e4       	ldi	r24, 0x48	; 72
     108:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(12);
     10c:	8c e0       	ldi	r24, 0x0C	; 12
     10e:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(74);
     112:	8a e4       	ldi	r24, 0x4A	; 74
     114:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(12);
     118:	8c e0       	ldi	r24, 0x0C	; 12
     11a:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(72);
     11e:	88 e4       	ldi	r24, 0x48	; 72
     120:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(12);
     124:	8c e0       	ldi	r24, 0x0C	; 12
     126:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(69);
     12a:	85 e4       	ldi	r24, 0x45	; 69
     12c:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(12);
     130:	8c e0       	ldi	r24, 0x0C	; 12
     132:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(77);
     136:	8d e4       	ldi	r24, 0x4D	; 77
     138:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(24);
     13c:	88 e1       	ldi	r24, 0x18	; 24
     13e:	0c 94 9f 01 	jmp	0x33e	; 0x33e <byteTx>

00000142 <powerOnRobot>:
}

// Ensure that the robot is On.
void powerOnRobot(void) {
  // If Create's power is off, turn it on
  if(!RobotIsOn) {
     142:	1d 99       	sbic	0x03, 5	; 3
     144:	12 c0       	rjmp	.+36     	; 0x16a <powerOnRobot+0x28>
    while(!RobotIsOn) {
     146:	1d 99       	sbic	0x03, 5	; 3
     148:	0c c0       	rjmp	.+24     	; 0x162 <powerOnRobot+0x20>
      RobotPwrToggleLow;
     14a:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
     14c:	84 ef       	ldi	r24, 0xF4	; 244
     14e:	91 e0       	ldi	r25, 0x01	; 1
     150:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
     154:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
     156:	84 e6       	ldi	r24, 0x64	; 100
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <delayMs>
      RobotPwrToggleLow;
     15e:	5f 98       	cbi	0x0b, 7	; 11
     160:	f2 cf       	rjmp	.-28     	; 0x146 <powerOnRobot+0x4>
    }
    delayMs(3500);  // Delay for startup
     162:	8c ea       	ldi	r24, 0xAC	; 172
     164:	9d e0       	ldi	r25, 0x0D	; 13
     166:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <delayMs>
  }

  // Flush the buffer
  while( (UCSR0A & 0x80) && UDR0);
     16a:	80 91 c0 00 	lds	r24, 0x00C0
     16e:	87 ff       	sbrs	r24, 7
     170:	04 c0       	rjmp	.+8      	; 0x17a <powerOnRobot+0x38>
     172:	80 91 c6 00 	lds	r24, 0x00C6
     176:	81 11       	cpse	r24, r1
     178:	f8 cf       	rjmp	.-16     	; 0x16a <powerOnRobot+0x28>
     17a:	08 95       	ret

0000017c <powerOffRobot>:
}

// Ensure that the robot is OFF.
void powerOffRobot(void) {
  // If Create's power is on, turn it off
  if(RobotIsOn) {
     17c:	1d 9b       	sbis	0x03, 5	; 3
     17e:	08 95       	ret
    while(RobotIsOn) {
     180:	1d 9b       	sbis	0x03, 5	; 3
     182:	0c c0       	rjmp	.+24     	; 0x19c <powerOffRobot+0x20>
      RobotPwrToggleLow;
     184:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
     186:	84 ef       	ldi	r24, 0xF4	; 244
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
     18e:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
     190:	84 e6       	ldi	r24, 0x64	; 100
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <delayMs>
      RobotPwrToggleLow;
     198:	5f 98       	cbi	0x0b, 7	; 11
     19a:	f2 cf       	rjmp	.-28     	; 0x180 <powerOffRobot+0x4>
     19c:	08 95       	ret

0000019e <__vector_14>:
volatile uint8_t  delayTimerRunning = 0;          // Definition checked against declaration


// Timer 0 interrupt 
// SIGNAL(SIG_OUTPUT_COMPARE0A)
ISR(TIMER0_COMPA_vect) {
     19e:	1f 92       	push	r1
     1a0:	0f 92       	push	r0
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	0f 92       	push	r0
     1a6:	11 24       	eor	r1, r1
     1a8:	8f 93       	push	r24
     1aa:	9f 93       	push	r25
  if(delayTimerCount)
     1ac:	80 91 bf 01 	lds	r24, 0x01BF
     1b0:	90 91 c0 01 	lds	r25, 0x01C0
     1b4:	89 2b       	or	r24, r25
     1b6:	51 f0       	breq	.+20     	; 0x1cc <__vector_14+0x2e>
    delayTimerCount--;
     1b8:	80 91 bf 01 	lds	r24, 0x01BF
     1bc:	90 91 c0 01 	lds	r25, 0x01C0
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	90 93 c0 01 	sts	0x01C0, r25
     1c6:	80 93 bf 01 	sts	0x01BF, r24
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__vector_14+0x32>
  else
    delayTimerRunning = 0;
     1cc:	10 92 be 01 	sts	0x01BE, r1
}
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	0f 90       	pop	r0
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	0f 90       	pop	r0
     1da:	1f 90       	pop	r1
     1dc:	18 95       	reti

000001de <__vector_11>:


//SIGNAL(SIG_OUTPUT_COMPARE1A)
ISR(TIMER1_COMPA_vect) {
     1de:	1f 92       	push	r1
     1e0:	0f 92       	push	r0
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	0f 92       	push	r0
     1e6:	11 24       	eor	r1, r1
     1e8:	2f 93       	push	r18
     1ea:	3f 93       	push	r19
     1ec:	4f 93       	push	r20
     1ee:	5f 93       	push	r21
     1f0:	6f 93       	push	r22
     1f2:	7f 93       	push	r23
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	af 93       	push	r26
     1fa:	bf 93       	push	r27
     1fc:	ef 93       	push	r30
     1fe:	ff 93       	push	r31
  //Update and send sensor values
  //transmit("01");
  byteTx(139);  // leds
     200:	8b e8       	ldi	r24, 0x8B	; 139
     202:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(0);    // set advance and play to OFF
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(255);  // red
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(255);  // full intensity 
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  readSensors();
     218:	0e 94 85 04 	call	0x90a	; 0x90a <readSensors>
}
     21c:	ff 91       	pop	r31
     21e:	ef 91       	pop	r30
     220:	bf 91       	pop	r27
     222:	af 91       	pop	r26
     224:	9f 91       	pop	r25
     226:	8f 91       	pop	r24
     228:	7f 91       	pop	r23
     22a:	6f 91       	pop	r22
     22c:	5f 91       	pop	r21
     22e:	4f 91       	pop	r20
     230:	3f 91       	pop	r19
     232:	2f 91       	pop	r18
     234:	0f 90       	pop	r0
     236:	0f be       	out	0x3f, r0	; 63
     238:	0f 90       	pop	r0
     23a:	1f 90       	pop	r1
     23c:	18 95       	reti

0000023e <__vector_12>:

ISR(TIMER1_COMPB_vect) { 
     23e:	1f 92       	push	r1
     240:	0f 92       	push	r0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	0f 92       	push	r0
     246:	11 24       	eor	r1, r1
     248:	2f 93       	push	r18
     24a:	3f 93       	push	r19
     24c:	4f 93       	push	r20
     24e:	5f 93       	push	r21
     250:	6f 93       	push	r22
     252:	7f 93       	push	r23
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	af 93       	push	r26
     25a:	bf 93       	push	r27
     25c:	ef 93       	push	r30
     25e:	ff 93       	push	r31
  //transmit("00");
  byteTx(139);  // leds
     260:	8b e8       	ldi	r24, 0x8B	; 139
     262:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(0);    // set advance and play to OFF
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(0);    // green
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(255);  // full intensity 
     272:	8f ef       	ldi	r24, 0xFF	; 255
     274:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  readSensors();
     278:	0e 94 85 04 	call	0x90a	; 0x90a <readSensors>
}
     27c:	ff 91       	pop	r31
     27e:	ef 91       	pop	r30
     280:	bf 91       	pop	r27
     282:	af 91       	pop	r26
     284:	9f 91       	pop	r25
     286:	8f 91       	pop	r24
     288:	7f 91       	pop	r23
     28a:	6f 91       	pop	r22
     28c:	5f 91       	pop	r21
     28e:	4f 91       	pop	r20
     290:	3f 91       	pop	r19
     292:	2f 91       	pop	r18
     294:	0f 90       	pop	r0
     296:	0f be       	out	0x3f, r0	; 63
     298:	0f 90       	pop	r0
     29a:	1f 90       	pop	r1
     29c:	18 95       	reti

0000029e <setupTimer>:

void setupTimer(void) {
  // ---------------------------------------------------
  //  Set up timer 0 to generate interrupts @ 1000Hz -- 1ms
  // ---------------------------------------------------
  TCCR0A = _BV(WGM01);              // Mode = CTC
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	84 bd       	out	0x24, r24	; 36
  TCCR0B = (_BV(CS00) | _BV(CS02)); // CS0 | CS2 = CLK/1024
     2a2:	95 e0       	ldi	r25, 0x05	; 5
     2a4:	95 bd       	out	0x25, r25	; 37
  OCR0A  = 17;                      // 18432000/(1024*1000) = 18
     2a6:	91 e1       	ldi	r25, 0x11	; 17
     2a8:	97 bd       	out	0x27, r25	; 39
  TIMSK0 = _BV(OCIE0A);             // Enable output compare A interrupt
     2aa:	80 93 6e 00 	sts	0x006E, r24


  // ---------------------------------------------------
  //  Set up timer 1 to generate interrupts @ 1Hz -- 1 second
  // ---------------------------------------------------
  TCCR1A = 0x00;
     2ae:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (_BV(WGM12) | _BV(CS10) | _BV(CS12));  // WGM12 | CS10 | CS12 = CTC Mode, CLK/1024
     2b2:	8d e0       	ldi	r24, 0x0D	; 13
     2b4:	80 93 81 00 	sts	0x0081, r24
  OCR1A  = 35999;                                 // 18432000/(1024*.5) = 36,000
     2b8:	8f e9       	ldi	r24, 0x9F	; 159
     2ba:	9c e8       	ldi	r25, 0x8C	; 140
     2bc:	90 93 89 00 	sts	0x0089, r25
     2c0:	80 93 88 00 	sts	0x0088, r24
  OCR1B  = 17999;                                 // 18432000/(1024*1)  = 18,000
     2c4:	8f e4       	ldi	r24, 0x4F	; 79
     2c6:	96 e4       	ldi	r25, 0x46	; 70
     2c8:	90 93 8b 00 	sts	0x008B, r25
     2cc:	80 93 8a 00 	sts	0x008A, r24
  TIMSK1 = _BV(OCIE1A) | _BV(OCIE1B);             // Enable output compare A and B interrupt
     2d0:	86 e0       	ldi	r24, 0x06	; 6
     2d2:	80 93 6f 00 	sts	0x006F, r24
     2d6:	08 95       	ret

000002d8 <delayMs>:
}

// Delay for the specified time in ms without updating sensor values
void delayMs(uint16_t time_ms)
{
  cli();
     2d8:	f8 94       	cli
  delayTimerRunning = 1;
     2da:	21 e0       	ldi	r18, 0x01	; 1
     2dc:	20 93 be 01 	sts	0x01BE, r18
  delayTimerCount = time_ms;
     2e0:	90 93 c0 01 	sts	0x01C0, r25
     2e4:	80 93 bf 01 	sts	0x01BF, r24
  sei();
     2e8:	78 94       	sei

  while(delayTimerRunning) {
     2ea:	80 91 be 01 	lds	r24, 0x01BE
     2ee:	88 23       	and	r24, r24
     2f0:	11 f0       	breq	.+4      	; 0x2f6 <delayMs+0x1e>
    asm("nop");
     2f2:	00 00       	nop
     2f4:	fa cf       	rjmp	.-12     	; 0x2ea <delayMs+0x12>
  }
     2f6:	08 95       	ret

000002f8 <setupIOPins>:
  sei();
}

void setupIOPins(void) {
  // Set I/O pins
  DDRB  = 0x10;
     2f8:	80 e1       	ldi	r24, 0x10	; 16
     2fa:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
     2fc:	8f ec       	ldi	r24, 0xCF	; 207
     2fe:	85 b9       	out	0x05, r24	; 5
  DDRC  = 0x00;
     300:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	88 b9       	out	0x08, r24	; 8
  DDRD  = 0xE6;
     306:	86 ee       	ldi	r24, 0xE6	; 230
     308:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
     30a:	8d e7       	ldi	r24, 0x7D	; 125
     30c:	8b b9       	out	0x0b, r24	; 11
     30e:	08 95       	ret

00000310 <setupSerialPort>:
}

void setupSerialPort(void) {
  // Set the transmission speed to 57600 baud, which is what the Create expects,
  // unless we tell it otherwise.
  UBRR0 = 19;
     310:	83 e1       	ldi	r24, 0x13	; 19
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	90 93 c5 00 	sts	0x00C5, r25
     318:	80 93 c4 00 	sts	0x00C4, r24
  
  // Enable both transmit and receive.
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
     31c:	88 e9       	ldi	r24, 0x98	; 152
     31e:	80 93 c1 00 	sts	0x00C1, r24
    // UCSR0B = 0x18;
  
  // Set 8-bit data.
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
     322:	86 e0       	ldi	r24, 0x06	; 6
     324:	80 93 c2 00 	sts	0x00C2, r24
    // UCSR0C = 0x06;

  //Turn on interupts
  sei();
     328:	78 94       	sei
     32a:	08 95       	ret

0000032c <initializeCommandModule>:
#include "oi.h"
#include "timer.h"

void initializeCommandModule(void){
  // Disable interrupts. ("Clear interrupt bit")
  cli();
     32c:	f8 94       	cli

  // One-time setup operations.
  setupIOPins();
     32e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <setupIOPins>
  setupTimer();
     332:	0e 94 4f 01 	call	0x29e	; 0x29e <setupTimer>
  setupSerialPort();
     336:	0e 94 88 01 	call	0x310	; 0x310 <setupSerialPort>

  // Enable interrupts. ("Set interrupt bit")
  sei();
     33a:	78 94       	sei
     33c:	08 95       	ret

0000033e <byteTx>:
//   UDR0 = value;
// }

// Transmit a byte over the serial port
void byteTx(uint8_t value) {
  while(!(UCSR0A & _BV(UDRE0))) ;
     33e:	90 91 c0 00 	lds	r25, 0x00C0
     342:	95 ff       	sbrs	r25, 5
     344:	fc cf       	rjmp	.-8      	; 0x33e <byteTx>
  UDR0 = value;
     346:	80 93 c6 00 	sts	0x00C6, r24
     34a:	08 95       	ret

0000034c <byteRx>:

uint8_t byteRx(void) {
  // Receive one byte from the robot.
  // Call setupSerialPort() first.
  // Wait for a byte to arrive in the recieve buffer.
  while(!(UCSR0A & 0x80)) ;
     34c:	80 91 c0 00 	lds	r24, 0x00C0
     350:	87 ff       	sbrs	r24, 7
     352:	fc cf       	rjmp	.-8      	; 0x34c <byteRx>
  
  // Return that byte.
  return UDR0;
     354:	80 91 c6 00 	lds	r24, 0x00C6
}
     358:	08 95       	ret

0000035a <baud>:

void baud(uint8_t baud_code) {
     35a:	cf 93       	push	r28
     35c:	c8 2f       	mov	r28, r24
  // Switch the baud rate on both Create and module
  if(baud_code <= 11)
     35e:	8c 30       	cpi	r24, 0x0C	; 12
     360:	08 f0       	brcs	.+2      	; 0x364 <baud+0xa>
     362:	53 c0       	rjmp	.+166    	; 0x40a <baud+0xb0>
  {
    byteTx(CmdBaud);
     364:	81 e8       	ldi	r24, 0x81	; 129
     366:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
    UCSR0A |= _BV(TXC0);
     36a:	80 91 c0 00 	lds	r24, 0x00C0
     36e:	80 64       	ori	r24, 0x40	; 64
     370:	80 93 c0 00 	sts	0x00C0, r24
    byteTx(baud_code);
     374:	8c 2f       	mov	r24, r28
     376:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;
     37a:	80 91 c0 00 	lds	r24, 0x00C0
     37e:	86 ff       	sbrs	r24, 6
     380:	fc cf       	rjmp	.-8      	; 0x37a <baud+0x20>

    cli();
     382:	f8 94       	cli

    // Switch the baud rate register
    if(baud_code == Baud115200) {
     384:	cb 30       	cpi	r28, 0x0B	; 11
     386:	19 f4       	brne	.+6      	; 0x38e <baud+0x34>
      UBRR0 = Ubrr115200;
     388:	89 e0       	ldi	r24, 0x09	; 9
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	34 c0       	rjmp	.+104    	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud57600) {
     38e:	ca 30       	cpi	r28, 0x0A	; 10
     390:	19 f4       	brne	.+6      	; 0x398 <baud+0x3e>
      UBRR0 = Ubrr57600;
     392:	83 e1       	ldi	r24, 0x13	; 19
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	2f c0       	rjmp	.+94     	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud38400) {
     398:	c9 30       	cpi	r28, 0x09	; 9
     39a:	19 f4       	brne	.+6      	; 0x3a2 <baud+0x48>
      UBRR0 = Ubrr38400;
     39c:	8d e1       	ldi	r24, 0x1D	; 29
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	2a c0       	rjmp	.+84     	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud28800) {
     3a2:	c8 30       	cpi	r28, 0x08	; 8
     3a4:	19 f4       	brne	.+6      	; 0x3ac <baud+0x52>
      UBRR0 = Ubrr28800;
     3a6:	87 e2       	ldi	r24, 0x27	; 39
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	25 c0       	rjmp	.+74     	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud19200) {
     3ac:	c7 30       	cpi	r28, 0x07	; 7
     3ae:	19 f4       	brne	.+6      	; 0x3b6 <baud+0x5c>
      UBRR0 = Ubrr19200;
     3b0:	8b e3       	ldi	r24, 0x3B	; 59
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	20 c0       	rjmp	.+64     	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud14400) {
     3b6:	c6 30       	cpi	r28, 0x06	; 6
     3b8:	19 f4       	brne	.+6      	; 0x3c0 <baud+0x66>
      UBRR0 = Ubrr14400;
     3ba:	8f e4       	ldi	r24, 0x4F	; 79
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	1b c0       	rjmp	.+54     	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud9600) {
     3c0:	c5 30       	cpi	r28, 0x05	; 5
     3c2:	19 f4       	brne	.+6      	; 0x3ca <baud+0x70>
      UBRR0 = Ubrr9600;
     3c4:	87 e7       	ldi	r24, 0x77	; 119
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	16 c0       	rjmp	.+44     	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud4800) {
     3ca:	c4 30       	cpi	r28, 0x04	; 4
     3cc:	19 f4       	brne	.+6      	; 0x3d4 <baud+0x7a>
      UBRR0 = Ubrr4800;
     3ce:	8f ee       	ldi	r24, 0xEF	; 239
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	11 c0       	rjmp	.+34     	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud2400) {
     3d4:	c3 30       	cpi	r28, 0x03	; 3
     3d6:	19 f4       	brne	.+6      	; 0x3de <baud+0x84>
      UBRR0 = Ubrr2400;
     3d8:	8f ed       	ldi	r24, 0xDF	; 223
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0c c0       	rjmp	.+24     	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud1200) {
     3de:	c2 30       	cpi	r28, 0x02	; 2
     3e0:	19 f4       	brne	.+6      	; 0x3e8 <baud+0x8e>
      UBRR0 = Ubrr1200;
     3e2:	8f eb       	ldi	r24, 0xBF	; 191
     3e4:	93 e0       	ldi	r25, 0x03	; 3
     3e6:	07 c0       	rjmp	.+14     	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud600) {
     3e8:	c1 30       	cpi	r28, 0x01	; 1
     3ea:	19 f4       	brne	.+6      	; 0x3f2 <baud+0x98>
      UBRR0 = Ubrr600;
     3ec:	8f e7       	ldi	r24, 0x7F	; 127
     3ee:	97 e0       	ldi	r25, 0x07	; 7
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <baud+0x9c>
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	9e e0       	ldi	r25, 0x0E	; 14
     3f6:	90 93 c5 00 	sts	0x00C5, r25
     3fa:	80 93 c4 00 	sts	0x00C4, r24
    }
    sei();
     3fe:	78 94       	sei

    delayMs(100);
     400:	84 e6       	ldi	r24, 0x64	; 100
     402:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     404:	cf 91       	pop	r28
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
    }
    sei();

    delayMs(100);
     406:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <delayMs>
  }
}
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <drive>:
}

/**	Drive the robot at rate 'rate' until stopped
 *		rate in mm/s
 */
void drive(int rate) {
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ec 01       	movw	r28, r24
	//} else if (rate < 0) {
		//use two compliment
		//not currently necessary
	//}

	byteTx(CmdDriveWheels);
     414:	81 e9       	ldi	r24, 0x91	; 145
     416:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
	byteTx(hi);
     41a:	8d 2f       	mov	r24, r29
     41c:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
	byteTx(lo);
     420:	8c 2f       	mov	r24, r28
     422:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
	byteTx(hi);
     426:	8d 2f       	mov	r24, r29
     428:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
	byteTx(lo);
     42c:	8c 2f       	mov	r24, r28
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28

	byteTx(CmdDriveWheels);
	byteTx(hi);
	byteTx(lo);
	byteTx(hi);
	byteTx(lo);
     432:	0c 94 9f 01 	jmp	0x33e	; 0x33e <byteTx>

00000436 <stop>:
}

/** Stop the robot	*/
void stop(void) {
	drive(0);
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0c 94 07 02 	jmp	0x40e	; 0x40e <drive>

0000043e <turn>:
/**	Turn the robot angle theta
 *		theta in radians
 *		positive angles indicate counter-clockwise turns
 *		negative angles indicate clockwise turns
 */
void turn(int theta) {
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ff 92       	push	r15
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	1f 92       	push	r1
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	6c 01       	movw	r12, r24
	uint8_t rHi;
	uint8_t rLo;
	uint8_t lHi;
	uint8_t lLo;

	if (theta > 0) {
     454:	18 16       	cp	r1, r24
     456:	19 06       	cpc	r1, r25
     458:	4c f0       	brlt	.+18     	; 0x46c <turn+0x2e>
	} else {
		rHi = vHiNeg;
		rLo = vLoNeg;
		lHi = vHiPos;
		lLo = vLoPos;
		theta *= -1;
     45a:	d1 94       	neg	r13
     45c:	c1 94       	neg	r12
     45e:	d1 08       	sbc	r13, r1
		lLo = vLoNeg;
	} else {
		rHi = vHiNeg;
		rLo = vLoNeg;
		lHi = vHiPos;
		lLo = vLoPos;
     460:	15 ea       	ldi	r17, 0xA5	; 165
		lHi = vHiNeg;
		lLo = vLoNeg;
	} else {
		rHi = vHiNeg;
		rLo = vLoNeg;
		lHi = vHiPos;
     462:	00 e0       	ldi	r16, 0x00	; 0
		rLo = vLoPos;
		lHi = vHiNeg;
		lLo = vLoNeg;
	} else {
		rHi = vHiNeg;
		rLo = vLoNeg;
     464:	9b e5       	ldi	r25, 0x5B	; 91
		rHi = vHiPos;
		rLo = vLoPos;
		lHi = vHiNeg;
		lLo = vLoNeg;
	} else {
		rHi = vHiNeg;
     466:	ff 24       	eor	r15, r15
     468:	fa 94       	dec	r15
     46a:	04 c0       	rjmp	.+8      	; 0x474 <turn+0x36>

	if (theta > 0) {
		rHi = vHiPos;
		rLo = vLoPos;
		lHi = vHiNeg;
		lLo = vLoNeg;
     46c:	1b e5       	ldi	r17, 0x5B	; 91
	uint8_t lLo;

	if (theta > 0) {
		rHi = vHiPos;
		rLo = vLoPos;
		lHi = vHiNeg;
     46e:	0f ef       	ldi	r16, 0xFF	; 255
	uint8_t lHi;
	uint8_t lLo;

	if (theta > 0) {
		rHi = vHiPos;
		rLo = vLoPos;
     470:	95 ea       	ldi	r25, 0xA5	; 165
	uint8_t rLo;
	uint8_t lHi;
	uint8_t lLo;

	if (theta > 0) {
		rHi = vHiPos;
     472:	f1 2c       	mov	r15, r1
		lHi = vHiPos;
		lLo = vLoPos;
		theta *= -1;
	}

	byteTx(CmdDriveWheels);
     474:	81 e9       	ldi	r24, 0x91	; 145
     476:	99 83       	std	Y+1, r25	; 0x01
     478:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
	byteTx(rHi);
     47c:	8f 2d       	mov	r24, r15
     47e:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
	byteTx(rLo);
     482:	99 81       	ldd	r25, Y+1	; 0x01
     484:	89 2f       	mov	r24, r25
     486:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
	byteTx(lHi);
     48a:	80 2f       	mov	r24, r16
     48c:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
	byteTx(lLo);
     490:	81 2f       	mov	r24, r17
     492:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>

	delayMs(theta);
     496:	c6 01       	movw	r24, r12
     498:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <delayMs>
	stop();
}
     49c:	0f 90       	pop	r0
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
	byteTx(rLo);
	byteTx(lHi);
	byteTx(lLo);

	delayMs(theta);
	stop();
     4ac:	0c 94 1b 02 	jmp	0x436	; 0x436 <stop>

000004b0 <pentagon>:
/** Make the robot drive in a pentagon shape
 *		direction only -1 or 1
 *			1 indicates counter-clockwise
 * 	  	-1 indicates clockwise
 */
void pentagon(int direction) {
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
        //drive for 8000ms = 8s, 8s * 100 mm/s = 800 mm = 80cm
				delayMs(8000); 
        stop();
				//turn at angle 3*pi/5 radians
				//(don't turn after the last leg)
        if (i != 4) turn((int)(direction*3*PI/5) * 1000);
     4c0:	6c 01       	movw	r12, r24
     4c2:	cc 0c       	add	r12, r12
     4c4:	dd 1c       	adc	r13, r13
     4c6:	c8 0e       	add	r12, r24
     4c8:	d9 1e       	adc	r13, r25
 *			1 indicates counter-clockwise
 * 	  	-1 indicates clockwise
 */
void pentagon(int direction) {
	int i;
	for (i=0; i<5; i++) {
     4ca:	c0 e0       	ldi	r28, 0x00	; 0
     4cc:	d0 e0       	ldi	r29, 0x00	; 0
        //drive for 8000ms = 8s, 8s * 100 mm/s = 800 mm = 80cm
				delayMs(8000); 
        stop();
				//turn at angle 3*pi/5 radians
				//(don't turn after the last leg)
        if (i != 4) turn((int)(direction*3*PI/5) * 1000);
     4ce:	ee 24       	eor	r14, r14
     4d0:	d7 fc       	sbrc	r13, 7
     4d2:	e0 94       	com	r14
     4d4:	fe 2c       	mov	r15, r14
     4d6:	08 ee       	ldi	r16, 0xE8	; 232
     4d8:	13 e0       	ldi	r17, 0x03	; 3
 */
void pentagon(int direction) {
	int i;
	for (i=0; i<5; i++) {
				//drive at 100mm/s        
				drive(100);
     4da:	84 e6       	ldi	r24, 0x64	; 100
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 07 02 	call	0x40e	; 0x40e <drive>
        //drive for 8000ms = 8s, 8s * 100 mm/s = 800 mm = 80cm
				delayMs(8000); 
     4e2:	80 e4       	ldi	r24, 0x40	; 64
     4e4:	9f e1       	ldi	r25, 0x1F	; 31
     4e6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <delayMs>
        stop();
     4ea:	0e 94 1b 02 	call	0x436	; 0x436 <stop>
				//turn at angle 3*pi/5 radians
				//(don't turn after the last leg)
        if (i != 4) turn((int)(direction*3*PI/5) * 1000);
     4ee:	c4 30       	cpi	r28, 0x04	; 4
     4f0:	d1 05       	cpc	r29, r1
     4f2:	e1 f0       	breq	.+56     	; 0x52c <__stack+0x2d>
     4f4:	c7 01       	movw	r24, r14
     4f6:	b6 01       	movw	r22, r12
     4f8:	0e 94 57 05 	call	0xaae	; 0xaae <__floatsisf>
     4fc:	2a ed       	ldi	r18, 0xDA	; 218
     4fe:	3f e0       	ldi	r19, 0x0F	; 15
     500:	49 e4       	ldi	r20, 0x49	; 73
     502:	50 e4       	ldi	r21, 0x40	; 64
     504:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__mulsf3>
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 ea       	ldi	r20, 0xA0	; 160
     50e:	50 e4       	ldi	r21, 0x40	; 64
     510:	0e 94 bc 04 	call	0x978	; 0x978 <__divsf3>
     514:	0e 94 24 05 	call	0xa48	; 0xa48 <__fixsfsi>
     518:	06 9f       	mul	r16, r22
     51a:	90 01       	movw	r18, r0
     51c:	07 9f       	mul	r16, r23
     51e:	30 0d       	add	r19, r0
     520:	16 9f       	mul	r17, r22
     522:	30 0d       	add	r19, r0
     524:	11 24       	eor	r1, r1
     526:	c9 01       	movw	r24, r18
     528:	0e 94 1f 02 	call	0x43e	; 0x43e <turn>
 *			1 indicates counter-clockwise
 * 	  	-1 indicates clockwise
 */
void pentagon(int direction) {
	int i;
	for (i=0; i<5; i++) {
     52c:	21 96       	adiw	r28, 0x01	; 1
     52e:	c5 30       	cpi	r28, 0x05	; 5
     530:	d1 05       	cpc	r29, r1
     532:	99 f6       	brne	.-90     	; 0x4da <pentagon+0x2a>
        stop();
				//turn at angle 3*pi/5 radians
				//(don't turn after the last leg)
        if (i != 4) turn((int)(direction*3*PI/5) * 1000);
    } 
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	df 90       	pop	r13
     542:	cf 90       	pop	r12
     544:	08 95       	ret

00000546 <setupRightLED>:

/*
 * This function sets up the right LED.
 */
void setupRightLED(void) {
	DDRD |= (1 << 5);
     546:	55 9a       	sbi	0x0a, 5	; 10
     548:	08 95       	ret

0000054a <rightLEDon>:
}
/*
 * This function turns on the right LED.
 */
void rightLEDon(void) {
	PORTD &= ~(1 << 5);
     54a:	5d 98       	cbi	0x0b, 5	; 11
     54c:	08 95       	ret

0000054e <rightLEDoff>:
} 
/*
 * This function turns off the right LED.
 */
void rightLEDoff(void) {
	PORTD |= (1 << 5);
     54e:	5d 9a       	sbi	0x0b, 5	; 11
     550:	08 95       	ret

00000552 <setupLeftLED>:
}
/*
 * This function sets up the left LED.
 */
void setupLeftLED(void) {
	DDRD |= (1 << 6);
     552:	56 9a       	sbi	0x0a, 6	; 10
     554:	08 95       	ret

00000556 <leftLEDon>:
}
/*
 * This function turns on the left LED. 
 */
void leftLEDon(void) {
	PORTD &= ~(1 << 6);
     556:	5e 98       	cbi	0x0b, 6	; 11
     558:	08 95       	ret

0000055a <leftLEDoff>:
} 
/*
 * This function turns off the left LED.
 */
void leftLEDoff(void) {
	PORTD |= (1 << 6);
     55a:	5e 9a       	sbi	0x0b, 6	; 11
     55c:	08 95       	ret

0000055e <changePowerLightRed>:
}
/*
 * This function changes the power light to red. 
 */
void changePowerLightRed(void) {
	byteTx(CmdLeds);
     55e:	8b e8       	ldi	r24, 0x8B	; 139
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(0x00);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(255);
     56e:	8f ef       	ldi	r24, 0xFF	; 255
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(255);
     576:	8f ef       	ldi	r24, 0xFF	; 255
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0c 94 9f 01 	jmp	0x33e	; 0x33e <byteTx>

0000057e <transmit>:
	char batteryCapacityArray[24];
	sprintf(batteryCapacityArray, "Battery Capacity: %i", (int)batteryCapacity);
	transmit(batteryCapacityArray);
}

int transmit(char* string) {
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	8c 01       	movw	r16, r24
    int i;
    int length = strlen(string);
     58c:	ec 01       	movw	r28, r24
     58e:	09 90       	ld	r0, Y+
     590:	00 20       	and	r0, r0
     592:	e9 f7       	brne	.-6      	; 0x58e <transmit+0x10>
     594:	21 97       	sbiw	r28, 0x01	; 1
     596:	c8 1b       	sub	r28, r24
     598:	d9 0b       	sbc	r29, r25
    
    for (i=0; i<length; i++) {
     59a:	7c 01       	movw	r14, r24
     59c:	c7 01       	movw	r24, r14
     59e:	80 1b       	sub	r24, r16
     5a0:	91 0b       	sbc	r25, r17
     5a2:	8c 17       	cp	r24, r28
     5a4:	9d 07       	cpc	r25, r29
     5a6:	34 f4       	brge	.+12     	; 0x5b4 <transmit+0x36>
        byteTx(string[i]);
     5a8:	f7 01       	movw	r30, r14
     5aa:	81 91       	ld	r24, Z+
     5ac:	7f 01       	movw	r14, r30
     5ae:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
     5b2:	f4 cf       	rjmp	.-24     	; 0x59c <transmit+0x1e>
    }

    return length;
}
     5b4:	ce 01       	movw	r24, r28
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	08 95       	ret

000005c4 <readWallSignal>:
	readWallSignal();
	readCliffSensors();
	readGroupPacket3();
} 

void readWallSignal(void) {
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	2b 97       	sbiw	r28, 0x0b	; 11
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
		
		uint16_t wall;
		uint8_t hi, lo;
		byteTx(142);
     5dc:	8e e8       	ldi	r24, 0x8E	; 142
     5de:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
		byteTx(WallPID);
     5e2:	8b e1       	ldi	r24, 0x1B	; 27
     5e4:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
		hi = byteRx();
     5e8:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>
     5ec:	18 2f       	mov	r17, r24
		lo = byteRx();
     5ee:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     5f2:	21 2f       	mov	r18, r17
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	32 2f       	mov	r19, r18
     5f8:	22 27       	eor	r18, r18
	total = total | lo;
     5fa:	28 2b       	or	r18, r24
		byteTx(WallPID);
		hi = byteRx();
		lo = byteRx();
		wall = twoUBytesIntoInt(hi, lo);
		char wallArray[11];
		sprintf(wallArray, "Wall: %i", (int)wall);
     5fc:	3f 93       	push	r19
     5fe:	2f 93       	push	r18
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	8e 01       	movw	r16, r28
     60a:	0f 5f       	subi	r16, 0xFF	; 255
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
     60e:	1f 93       	push	r17
     610:	0f 93       	push	r16
     612:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
		transmit(wallArray);
     616:	c8 01       	movw	r24, r16
     618:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0

}
     628:	2b 96       	adiw	r28, 0x0b	; 11
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	08 95       	ret

0000063e <readCliffSensors>:

void readCliffSensors(void) {
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	c2 55       	subi	r28, 0x52	; 82
     64c:	d1 09       	sbc	r29, r1
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
	
		uint16_t cliffLeft, cliffFrontLeft, cliffFrontRight, cliffRight;
		uint8_t hi, lo;
		byteTx(142);
     658:	8e e8       	ldi	r24, 0x8E	; 142
     65a:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
		byteTx(CliffLeftPID);
     65e:	8c e1       	ldi	r24, 0x1C	; 28
     660:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
		hi = byteRx();
     664:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>
     668:	18 2f       	mov	r17, r24
		lo = byteRx();
     66a:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     66e:	21 2f       	mov	r18, r17
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	32 2f       	mov	r19, r18
     674:	22 27       	eor	r18, r18
	total = total | lo;
     676:	28 2b       	or	r18, r24
		byteTx(CliffLeftPID);
		hi = byteRx();
		lo = byteRx();
		cliffLeft = twoUBytesIntoInt(hi, lo);
		char cliffLeftArray[17];
		sprintf(cliffLeftArray, "Cliff Left: %i", (int)cliffLeft);
     678:	3f 93       	push	r19
     67a:	2f 93       	push	r18
     67c:	89 e0       	ldi	r24, 0x09	; 9
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	8e 01       	movw	r16, r28
     686:	0e 5b       	subi	r16, 0xBE	; 190
     688:	1f 4f       	sbci	r17, 0xFF	; 255
     68a:	1f 93       	push	r17
     68c:	0f 93       	push	r16
     68e:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
		transmit(cliffLeftArray);
     692:	c8 01       	movw	r24, r16
     694:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>

		byteTx(142);
     698:	8e e8       	ldi	r24, 0x8E	; 142
     69a:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
		byteTx(CliffFrontLeftPID);
     69e:	8d e1       	ldi	r24, 0x1D	; 29
     6a0:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
		hi = byteRx();
     6a4:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>
     6a8:	18 2f       	mov	r17, r24
		lo = byteRx();
     6aa:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     6ae:	21 2f       	mov	r18, r17
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	32 2f       	mov	r19, r18
     6b4:	22 27       	eor	r18, r18
	total = total | lo;
     6b6:	28 2b       	or	r18, r24
		byteTx(CliffFrontLeftPID);
		hi = byteRx();
		lo = byteRx();
		cliffFrontLeft = twoUBytesIntoInt(hi, lo);
		char cliffFrontLeftArray[23];
		sprintf(cliffFrontLeftArray, "Cliff Front Left: %i", (int)cliffFrontLeft);
     6b8:	3f 93       	push	r19
     6ba:	2f 93       	push	r18
     6bc:	88 e1       	ldi	r24, 0x18	; 24
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	8e 01       	movw	r16, r28
     6c6:	07 5e       	subi	r16, 0xE7	; 231
     6c8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ca:	1f 93       	push	r17
     6cc:	0f 93       	push	r16
     6ce:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
		transmit(cliffFrontLeftArray);
     6d2:	c8 01       	movw	r24, r16
     6d4:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>

		byteTx(142);
     6d8:	8e e8       	ldi	r24, 0x8E	; 142
     6da:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
		byteTx(CliffFrontRightPID);
     6de:	8e e1       	ldi	r24, 0x1E	; 30
     6e0:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
		hi = byteRx();
     6e4:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>
     6e8:	18 2f       	mov	r17, r24
		lo = byteRx();
     6ea:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     6ee:	21 2f       	mov	r18, r17
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	32 2f       	mov	r19, r18
     6f4:	22 27       	eor	r18, r18
	total = total | lo;
     6f6:	28 2b       	or	r18, r24
		byteTx(CliffFrontRightPID);
		hi = byteRx();
		lo = byteRx();
		cliffFrontRight = twoUBytesIntoInt(hi, lo);
		char cliffFrontRightArray[24];
		sprintf(cliffFrontRightArray, "Cliff Front Right: %i", (int)cliffFrontRight);
     6f8:	3f 93       	push	r19
     6fa:	2f 93       	push	r18
     6fc:	8d e2       	ldi	r24, 0x2D	; 45
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	8e 01       	movw	r16, r28
     706:	0f 5f       	subi	r16, 0xFF	; 255
     708:	1f 4f       	sbci	r17, 0xFF	; 255
     70a:	1f 93       	push	r17
     70c:	0f 93       	push	r16
     70e:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
		transmit(cliffFrontRightArray);
     712:	c8 01       	movw	r24, r16
     714:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>

		byteTx(142);
     718:	8e e8       	ldi	r24, 0x8E	; 142
     71a:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
		byteTx(CliffRightPID);
     71e:	8f e1       	ldi	r24, 0x1F	; 31
     720:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
		hi = byteRx();
     724:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>
     728:	18 2f       	mov	r17, r24
		lo = byteRx();
     72a:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     72e:	21 2f       	mov	r18, r17
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	32 2f       	mov	r19, r18
     734:	22 27       	eor	r18, r18
	total = total | lo;
     736:	28 2b       	or	r18, r24
		byteTx(CliffRightPID);
		hi = byteRx();
		lo = byteRx();
		cliffRight = twoUBytesIntoInt(hi, lo);
		char cliffRightArray[18];
		sprintf(cliffRightArray, "Cliff Right: %i", (int)cliffRight);
     738:	3f 93       	push	r19
     73a:	2f 93       	push	r18
     73c:	83 e4       	ldi	r24, 0x43	; 67
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	8e 01       	movw	r16, r28
     746:	00 5d       	subi	r16, 0xD0	; 208
     748:	1f 4f       	sbci	r17, 0xFF	; 255
     74a:	1f 93       	push	r17
     74c:	0f 93       	push	r16
     74e:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
		transmit(cliffRightArray);
     752:	c8 01       	movw	r24, r16
     754:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61

}
     762:	ce 5a       	subi	r28, 0xAE	; 174
     764:	df 4f       	sbci	r29, 0xFF	; 255
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	08 95       	ret

0000077a <readGroupPacket3>:

void readGroupPacket3(void) {
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	c2 58       	subi	r28, 0x82	; 130
     790:	d1 09       	sbc	r29, r1
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	//read group packet 3
	uint8_t i;
	uint8_t group3Data[10];  /* array for group packet ID 3 data */
	while(UCSR0A & 0x80) /* clear the receive buffer */
     79c:	80 91 c0 00 	lds	r24, 0x00C0
     7a0:	87 ff       	sbrs	r24, 7
     7a2:	03 c0       	rjmp	.+6      	; 0x7aa <readGroupPacket3+0x30>
	  i = UDR0;
     7a4:	80 91 c6 00 	lds	r24, 0x00C6
     7a8:	f9 cf       	rjmp	.-14     	; 0x79c <readGroupPacket3+0x22>
	byteTx(142);  /* sensor opcode */
     7aa:	8e e8       	ldi	r24, 0x8E	; 142
     7ac:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
	byteTx(3);   /* send request for packet 3 */
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
     7b6:	7e 01       	movw	r14, r28
     7b8:	89 e7       	ldi	r24, 0x79	; 121
     7ba:	e8 0e       	add	r14, r24
     7bc:	f1 1c       	adc	r15, r1
     7be:	67 01       	movw	r12, r14
     7c0:	9a e0       	ldi	r25, 0x0A	; 10
     7c2:	c9 0e       	add	r12, r25
     7c4:	d1 1c       	adc	r13, r1
     7c6:	87 01       	movw	r16, r14
	for(i = 0; i < 10; i++) //10 is size of group
	{
	  group3Data[i] = byteRx();  /* read each sensor byte */
     7c8:	0e 94 a6 01 	call	0x34c	; 0x34c <byteRx>
     7cc:	f7 01       	movw	r30, r14
     7ce:	81 93       	st	Z+, r24
     7d0:	7f 01       	movw	r14, r30
	uint8_t group3Data[10];  /* array for group packet ID 3 data */
	while(UCSR0A & 0x80) /* clear the receive buffer */
	  i = UDR0;
	byteTx(142);  /* sensor opcode */
	byteTx(3);   /* send request for packet 3 */
	for(i = 0; i < 10; i++) //10 is size of group
     7d2:	ec 15       	cp	r30, r12
     7d4:	fd 05       	cpc	r31, r13
     7d6:	c1 f7       	brne	.-16     	; 0x7c8 <readGroupPacket3+0x4e>
	  group3Data[i] = byteRx();  /* read each sensor byte */
	}

	//charging state - max length == 17
	char chargingState[17];
	sprintf(chargingState, "Charging State: %i", (int)group3Data[0]);
     7d8:	f8 01       	movw	r30, r16
     7da:	80 81       	ld	r24, Z
     7dc:	1f 92       	push	r1
     7de:	8f 93       	push	r24
     7e0:	83 e5       	ldi	r24, 0x53	; 83
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	9f 93       	push	r25
     7e6:	8f 93       	push	r24
     7e8:	7e 01       	movw	r14, r28
     7ea:	f9 e4       	ldi	r31, 0x49	; 73
     7ec:	ef 0e       	add	r14, r31
     7ee:	f1 1c       	adc	r15, r1
     7f0:	ff 92       	push	r15
     7f2:	ef 92       	push	r14
     7f4:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
	transmit(chargingState);
     7f8:	c7 01       	movw	r24, r14
     7fa:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     7fe:	f8 01       	movw	r30, r16
     800:	81 81       	ldd	r24, Z+1	; 0x01
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	98 2f       	mov	r25, r24
     806:	88 27       	eor	r24, r24
	total = total | lo;
     808:	22 81       	ldd	r18, Z+2	; 0x02
     80a:	82 2b       	or	r24, r18
	transmit(chargingState);

	//voltage - max length == 17
	uint16_t voltage = twoUBytesIntoInt(group3Data[1], group3Data[2]);
	char voltageArray[15];
	sprintf(voltageArray, "Voltage: %i", (int)voltage);
     80c:	9f 93       	push	r25
     80e:	8f 93       	push	r24
     810:	86 e6       	ldi	r24, 0x66	; 102
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	7e 01       	movw	r14, r28
     81a:	fa e6       	ldi	r31, 0x6A	; 106
     81c:	ef 0e       	add	r14, r31
     81e:	f1 1c       	adc	r15, r1
     820:	ff 92       	push	r15
     822:	ef 92       	push	r14
     824:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
	transmit(voltageArray);
     828:	c7 01       	movw	r24, r14
     82a:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>
	return total; 

}

int16_t twoBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     82e:	f8 01       	movw	r30, r16
     830:	83 81       	ldd	r24, Z+3	; 0x03
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	98 2f       	mov	r25, r24
     836:	88 27       	eor	r24, r24
	total = total | lo;
     838:	24 81       	ldd	r18, Z+4	; 0x04
     83a:	82 2b       	or	r24, r18
	transmit(voltageArray);

	//signed int
	int16_t current = twoBytesIntoInt(group3Data[3], group3Data[4]);
	char currentArray[16];
	sprintf(currentArray, "Current: %i", (int)current);
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	82 e7       	ldi	r24, 0x72	; 114
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	7e 01       	movw	r14, r28
     84a:	fa e5       	ldi	r31, 0x5A	; 90
     84c:	ef 0e       	add	r14, r31
     84e:	f1 1c       	adc	r15, r1
     850:	ff 92       	push	r15
     852:	ef 92       	push	r14
     854:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
	transmit(currentArray);
     858:	c7 01       	movw	r24, r14
     85a:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>

	//signed int
	int16_t battTemp = group3Data[5];
     85e:	f8 01       	movw	r30, r16
     860:	85 81       	ldd	r24, Z+5	; 0x05
	char battTempArray[26];
	sprintf(battTempArray, "Battery Temperature: %i", (int)battTemp);
     862:	1f 92       	push	r1
     864:	8f 93       	push	r24
     866:	8e e7       	ldi	r24, 0x7E	; 126
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	7c 01       	movw	r14, r24
     874:	ff 92       	push	r15
     876:	8f 93       	push	r24
     878:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
	transmit(battTempArray);
     87c:	c7 01       	movw	r24, r14
     87e:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     882:	f8 01       	movw	r30, r16
     884:	86 81       	ldd	r24, Z+6	; 0x06
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	98 2f       	mov	r25, r24
     88a:	88 27       	eor	r24, r24
	total = total | lo;
     88c:	27 81       	ldd	r18, Z+7	; 0x07
     88e:	82 2b       	or	r24, r18
	sprintf(battTempArray, "Battery Temperature: %i", (int)battTemp);
	transmit(battTempArray);

	uint16_t batteryCharge = twoUBytesIntoInt(group3Data[6], group3Data[7]);
	char batteryChargeArray[22];
	sprintf(batteryChargeArray, "Battery Charge: %i", (int)batteryCharge);
     890:	9f 93       	push	r25
     892:	8f 93       	push	r24
     894:	86 e9       	ldi	r24, 0x96	; 150
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	9f 93       	push	r25
     89a:	8f 93       	push	r24
     89c:	7e 01       	movw	r14, r28
     89e:	f3 e3       	ldi	r31, 0x33	; 51
     8a0:	ef 0e       	add	r14, r31
     8a2:	f1 1c       	adc	r15, r1
     8a4:	ff 92       	push	r15
     8a6:	ef 92       	push	r14
     8a8:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
	transmit(batteryChargeArray);
     8ac:	c7 01       	movw	r24, r14
     8ae:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     8b2:	f8 01       	movw	r30, r16
     8b4:	80 85       	ldd	r24, Z+8	; 0x08
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	98 2f       	mov	r25, r24
     8ba:	88 27       	eor	r24, r24
	total = total | lo;
     8bc:	21 85       	ldd	r18, Z+9	; 0x09
     8be:	82 2b       	or	r24, r18
	sprintf(batteryChargeArray, "Battery Charge: %i", (int)batteryCharge);
	transmit(batteryChargeArray);

	uint16_t batteryCapacity = twoUBytesIntoInt(group3Data[8], group3Data[9]);
	char batteryCapacityArray[24];
	sprintf(batteryCapacityArray, "Battery Capacity: %i", (int)batteryCapacity);
     8c0:	9f 93       	push	r25
     8c2:	8f 93       	push	r24
     8c4:	89 ea       	ldi	r24, 0xA9	; 169
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	9f 93       	push	r25
     8ca:	8f 93       	push	r24
     8cc:	8e 01       	movw	r16, r28
     8ce:	05 5e       	subi	r16, 0xE5	; 229
     8d0:	1f 4f       	sbci	r17, 0xFF	; 255
     8d2:	1f 93       	push	r17
     8d4:	0f 93       	push	r16
     8d6:	0e 94 46 06 	call	0xc8c	; 0xc8c <sprintf>
	transmit(batteryCapacityArray);
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 bf 02 	call	0x57e	; 0x57e <transmit>
}
     8ea:	ce 57       	subi	r28, 0x7E	; 126
     8ec:	df 4f       	sbci	r29, 0xFF	; 255
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	08 95       	ret

0000090a <readSensors>:
#include "sensors.h"

void readSensors(void) {

	readWallSignal();
     90a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <readWallSignal>
	readCliffSensors();
     90e:	0e 94 1f 03 	call	0x63e	; 0x63e <readCliffSensors>
	readGroupPacket3();
     912:	0c 94 bd 03 	jmp	0x77a	; 0x77a <readGroupPacket3>

00000916 <twoUBytesIntoInt>:

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     916:	70 e0       	ldi	r23, 0x00	; 0
	total = total | lo;
	return total; 

}
     918:	9b 01       	movw	r18, r22
     91a:	38 2b       	or	r19, r24
     91c:	c9 01       	movw	r24, r18
     91e:	08 95       	ret

00000920 <twoBytesIntoInt>:

int16_t twoBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
     920:	70 e0       	ldi	r23, 0x00	; 0
	total = total | lo;
	return total; 
     922:	9b 01       	movw	r18, r22
     924:	38 2b       	or	r19, r24
     926:	c9 01       	movw	r24, r18
     928:	08 95       	ret

0000092a <main>:
#include "sensors.h"

// Declare Global variables 
int main() {
  // Set up Create and module
  initializeCommandModule();
     92a:	0e 94 96 01 	call	0x32c	; 0x32c <initializeCommandModule>
    
  powerOnRobot();
     92e:	0e 94 a1 00 	call	0x142	; 0x142 <powerOnRobot>
    // Is the Robot on
  byteTx(CmdStart);
     932:	80 e8       	ldi	r24, 0x80	; 128
     934:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
    // Start the create
  baud(Baud57600);
     938:	8a e0       	ldi	r24, 0x0A	; 10
     93a:	0e 94 ad 01 	call	0x35a	; 0x35a <baud>
    // Set the baud rate for the Create and Command Module
  defineSongs();
     93e:	0e 94 53 00 	call	0xa6	; 0xa6 <defineSongs>
    // Define some songs so that we know the robot is on.
  byteTx(CmdControl);
     942:	82 e8       	ldi	r24, 0x82	; 130
     944:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
    // Deprecated form of safe mode. I use it because it will
    // turn of all LEDs, so it's essentially a reset.
  byteTx(CmdFull);
     948:	84 e8       	ldi	r24, 0x84	; 132
     94a:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
    // We are operating in FULL mode.

  // CSCE 274 students: I would make sure the robot stops. 
  //                    As a precaution for the robot and your grade.
  stop();
     94e:	0e 94 1b 02 	call	0x436	; 0x436 <stop>

  // Play the reset song and wait while it plays.
  byteTx(CmdPlay);
     952:	8d e8       	ldi	r24, 0x8D	; 141
     954:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  byteTx(RESET_SONG);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 9f 01 	call	0x33e	; 0x33e <byteTx>
  delayMs(750);
     95e:	8e ee       	ldi	r24, 0xEE	; 238
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <delayMs>

  //Turn power button on
  // changePowerLightRed();

  LED1On;
     966:	5d 98       	cbi	0x0b, 5	; 11


  // Infinite operation loop
  for(;;) {
    if(UserButtonPressed) {
     968:	4c 99       	sbic	0x09, 4	; 9
     96a:	fe cf       	rjmp	.-4      	; 0x968 <main+0x3e>
      powerOffRobot();
     96c:	0e 94 be 00 	call	0x17c	; 0x17c <powerOffRobot>
      exit(1);
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 17 09 	call	0x122e	; 0x122e <_exit>

00000978 <__divsf3>:
     978:	0c d0       	rcall	.+24     	; 0x992 <__divsf3x>
     97a:	eb c0       	rjmp	.+470    	; 0xb52 <__fp_round>
     97c:	e3 d0       	rcall	.+454    	; 0xb44 <__fp_pscB>
     97e:	40 f0       	brcs	.+16     	; 0x990 <__divsf3+0x18>
     980:	da d0       	rcall	.+436    	; 0xb36 <__fp_pscA>
     982:	30 f0       	brcs	.+12     	; 0x990 <__divsf3+0x18>
     984:	21 f4       	brne	.+8      	; 0x98e <__divsf3+0x16>
     986:	5f 3f       	cpi	r21, 0xFF	; 255
     988:	19 f0       	breq	.+6      	; 0x990 <__divsf3+0x18>
     98a:	cc c0       	rjmp	.+408    	; 0xb24 <__fp_inf>
     98c:	51 11       	cpse	r21, r1
     98e:	15 c1       	rjmp	.+554    	; 0xbba <__fp_szero>
     990:	cf c0       	rjmp	.+414    	; 0xb30 <__fp_nan>

00000992 <__divsf3x>:
     992:	f0 d0       	rcall	.+480    	; 0xb74 <__fp_split3>
     994:	98 f3       	brcs	.-26     	; 0x97c <__divsf3+0x4>

00000996 <__divsf3_pse>:
     996:	99 23       	and	r25, r25
     998:	c9 f3       	breq	.-14     	; 0x98c <__divsf3+0x14>
     99a:	55 23       	and	r21, r21
     99c:	b1 f3       	breq	.-20     	; 0x98a <__divsf3+0x12>
     99e:	95 1b       	sub	r25, r21
     9a0:	55 0b       	sbc	r21, r21
     9a2:	bb 27       	eor	r27, r27
     9a4:	aa 27       	eor	r26, r26
     9a6:	62 17       	cp	r22, r18
     9a8:	73 07       	cpc	r23, r19
     9aa:	84 07       	cpc	r24, r20
     9ac:	38 f0       	brcs	.+14     	; 0x9bc <__divsf3_pse+0x26>
     9ae:	9f 5f       	subi	r25, 0xFF	; 255
     9b0:	5f 4f       	sbci	r21, 0xFF	; 255
     9b2:	22 0f       	add	r18, r18
     9b4:	33 1f       	adc	r19, r19
     9b6:	44 1f       	adc	r20, r20
     9b8:	aa 1f       	adc	r26, r26
     9ba:	a9 f3       	breq	.-22     	; 0x9a6 <__divsf3_pse+0x10>
     9bc:	33 d0       	rcall	.+102    	; 0xa24 <__divsf3_pse+0x8e>
     9be:	0e 2e       	mov	r0, r30
     9c0:	3a f0       	brmi	.+14     	; 0x9d0 <__divsf3_pse+0x3a>
     9c2:	e0 e8       	ldi	r30, 0x80	; 128
     9c4:	30 d0       	rcall	.+96     	; 0xa26 <__divsf3_pse+0x90>
     9c6:	91 50       	subi	r25, 0x01	; 1
     9c8:	50 40       	sbci	r21, 0x00	; 0
     9ca:	e6 95       	lsr	r30
     9cc:	00 1c       	adc	r0, r0
     9ce:	ca f7       	brpl	.-14     	; 0x9c2 <__divsf3_pse+0x2c>
     9d0:	29 d0       	rcall	.+82     	; 0xa24 <__divsf3_pse+0x8e>
     9d2:	fe 2f       	mov	r31, r30
     9d4:	27 d0       	rcall	.+78     	; 0xa24 <__divsf3_pse+0x8e>
     9d6:	66 0f       	add	r22, r22
     9d8:	77 1f       	adc	r23, r23
     9da:	88 1f       	adc	r24, r24
     9dc:	bb 1f       	adc	r27, r27
     9de:	26 17       	cp	r18, r22
     9e0:	37 07       	cpc	r19, r23
     9e2:	48 07       	cpc	r20, r24
     9e4:	ab 07       	cpc	r26, r27
     9e6:	b0 e8       	ldi	r27, 0x80	; 128
     9e8:	09 f0       	breq	.+2      	; 0x9ec <__divsf3_pse+0x56>
     9ea:	bb 0b       	sbc	r27, r27
     9ec:	80 2d       	mov	r24, r0
     9ee:	bf 01       	movw	r22, r30
     9f0:	ff 27       	eor	r31, r31
     9f2:	93 58       	subi	r25, 0x83	; 131
     9f4:	5f 4f       	sbci	r21, 0xFF	; 255
     9f6:	2a f0       	brmi	.+10     	; 0xa02 <__divsf3_pse+0x6c>
     9f8:	9e 3f       	cpi	r25, 0xFE	; 254
     9fa:	51 05       	cpc	r21, r1
     9fc:	68 f0       	brcs	.+26     	; 0xa18 <__divsf3_pse+0x82>
     9fe:	92 c0       	rjmp	.+292    	; 0xb24 <__fp_inf>
     a00:	dc c0       	rjmp	.+440    	; 0xbba <__fp_szero>
     a02:	5f 3f       	cpi	r21, 0xFF	; 255
     a04:	ec f3       	brlt	.-6      	; 0xa00 <__divsf3_pse+0x6a>
     a06:	98 3e       	cpi	r25, 0xE8	; 232
     a08:	dc f3       	brlt	.-10     	; 0xa00 <__divsf3_pse+0x6a>
     a0a:	86 95       	lsr	r24
     a0c:	77 95       	ror	r23
     a0e:	67 95       	ror	r22
     a10:	b7 95       	ror	r27
     a12:	f7 95       	ror	r31
     a14:	9f 5f       	subi	r25, 0xFF	; 255
     a16:	c9 f7       	brne	.-14     	; 0xa0a <__divsf3_pse+0x74>
     a18:	88 0f       	add	r24, r24
     a1a:	91 1d       	adc	r25, r1
     a1c:	96 95       	lsr	r25
     a1e:	87 95       	ror	r24
     a20:	97 f9       	bld	r25, 7
     a22:	08 95       	ret
     a24:	e1 e0       	ldi	r30, 0x01	; 1
     a26:	66 0f       	add	r22, r22
     a28:	77 1f       	adc	r23, r23
     a2a:	88 1f       	adc	r24, r24
     a2c:	bb 1f       	adc	r27, r27
     a2e:	62 17       	cp	r22, r18
     a30:	73 07       	cpc	r23, r19
     a32:	84 07       	cpc	r24, r20
     a34:	ba 07       	cpc	r27, r26
     a36:	20 f0       	brcs	.+8      	; 0xa40 <__divsf3_pse+0xaa>
     a38:	62 1b       	sub	r22, r18
     a3a:	73 0b       	sbc	r23, r19
     a3c:	84 0b       	sbc	r24, r20
     a3e:	ba 0b       	sbc	r27, r26
     a40:	ee 1f       	adc	r30, r30
     a42:	88 f7       	brcc	.-30     	; 0xa26 <__divsf3_pse+0x90>
     a44:	e0 95       	com	r30
     a46:	08 95       	ret

00000a48 <__fixsfsi>:
     a48:	04 d0       	rcall	.+8      	; 0xa52 <__fixunssfsi>
     a4a:	68 94       	set
     a4c:	b1 11       	cpse	r27, r1
     a4e:	b5 c0       	rjmp	.+362    	; 0xbba <__fp_szero>
     a50:	08 95       	ret

00000a52 <__fixunssfsi>:
     a52:	98 d0       	rcall	.+304    	; 0xb84 <__fp_splitA>
     a54:	88 f0       	brcs	.+34     	; 0xa78 <__fixunssfsi+0x26>
     a56:	9f 57       	subi	r25, 0x7F	; 127
     a58:	90 f0       	brcs	.+36     	; 0xa7e <__fixunssfsi+0x2c>
     a5a:	b9 2f       	mov	r27, r25
     a5c:	99 27       	eor	r25, r25
     a5e:	b7 51       	subi	r27, 0x17	; 23
     a60:	a0 f0       	brcs	.+40     	; 0xa8a <__fixunssfsi+0x38>
     a62:	d1 f0       	breq	.+52     	; 0xa98 <__fixunssfsi+0x46>
     a64:	66 0f       	add	r22, r22
     a66:	77 1f       	adc	r23, r23
     a68:	88 1f       	adc	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	1a f0       	brmi	.+6      	; 0xa74 <__fixunssfsi+0x22>
     a6e:	ba 95       	dec	r27
     a70:	c9 f7       	brne	.-14     	; 0xa64 <__fixunssfsi+0x12>
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__fixunssfsi+0x46>
     a74:	b1 30       	cpi	r27, 0x01	; 1
     a76:	81 f0       	breq	.+32     	; 0xa98 <__fixunssfsi+0x46>
     a78:	9f d0       	rcall	.+318    	; 0xbb8 <__fp_zero>
     a7a:	b1 e0       	ldi	r27, 0x01	; 1
     a7c:	08 95       	ret
     a7e:	9c c0       	rjmp	.+312    	; 0xbb8 <__fp_zero>
     a80:	67 2f       	mov	r22, r23
     a82:	78 2f       	mov	r23, r24
     a84:	88 27       	eor	r24, r24
     a86:	b8 5f       	subi	r27, 0xF8	; 248
     a88:	39 f0       	breq	.+14     	; 0xa98 <__fixunssfsi+0x46>
     a8a:	b9 3f       	cpi	r27, 0xF9	; 249
     a8c:	cc f3       	brlt	.-14     	; 0xa80 <__fixunssfsi+0x2e>
     a8e:	86 95       	lsr	r24
     a90:	77 95       	ror	r23
     a92:	67 95       	ror	r22
     a94:	b3 95       	inc	r27
     a96:	d9 f7       	brne	.-10     	; 0xa8e <__fixunssfsi+0x3c>
     a98:	3e f4       	brtc	.+14     	; 0xaa8 <__fixunssfsi+0x56>
     a9a:	90 95       	com	r25
     a9c:	80 95       	com	r24
     a9e:	70 95       	com	r23
     aa0:	61 95       	neg	r22
     aa2:	7f 4f       	sbci	r23, 0xFF	; 255
     aa4:	8f 4f       	sbci	r24, 0xFF	; 255
     aa6:	9f 4f       	sbci	r25, 0xFF	; 255
     aa8:	08 95       	ret

00000aaa <__floatunsisf>:
     aaa:	e8 94       	clt
     aac:	09 c0       	rjmp	.+18     	; 0xac0 <__floatsisf+0x12>

00000aae <__floatsisf>:
     aae:	97 fb       	bst	r25, 7
     ab0:	3e f4       	brtc	.+14     	; 0xac0 <__floatsisf+0x12>
     ab2:	90 95       	com	r25
     ab4:	80 95       	com	r24
     ab6:	70 95       	com	r23
     ab8:	61 95       	neg	r22
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	8f 4f       	sbci	r24, 0xFF	; 255
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
     ac0:	99 23       	and	r25, r25
     ac2:	a9 f0       	breq	.+42     	; 0xaee <__floatsisf+0x40>
     ac4:	f9 2f       	mov	r31, r25
     ac6:	96 e9       	ldi	r25, 0x96	; 150
     ac8:	bb 27       	eor	r27, r27
     aca:	93 95       	inc	r25
     acc:	f6 95       	lsr	r31
     ace:	87 95       	ror	r24
     ad0:	77 95       	ror	r23
     ad2:	67 95       	ror	r22
     ad4:	b7 95       	ror	r27
     ad6:	f1 11       	cpse	r31, r1
     ad8:	f8 cf       	rjmp	.-16     	; 0xaca <__floatsisf+0x1c>
     ada:	fa f4       	brpl	.+62     	; 0xb1a <__floatsisf+0x6c>
     adc:	bb 0f       	add	r27, r27
     ade:	11 f4       	brne	.+4      	; 0xae4 <__floatsisf+0x36>
     ae0:	60 ff       	sbrs	r22, 0
     ae2:	1b c0       	rjmp	.+54     	; 0xb1a <__floatsisf+0x6c>
     ae4:	6f 5f       	subi	r22, 0xFF	; 255
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	8f 4f       	sbci	r24, 0xFF	; 255
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
     aec:	16 c0       	rjmp	.+44     	; 0xb1a <__floatsisf+0x6c>
     aee:	88 23       	and	r24, r24
     af0:	11 f0       	breq	.+4      	; 0xaf6 <__floatsisf+0x48>
     af2:	96 e9       	ldi	r25, 0x96	; 150
     af4:	11 c0       	rjmp	.+34     	; 0xb18 <__floatsisf+0x6a>
     af6:	77 23       	and	r23, r23
     af8:	21 f0       	breq	.+8      	; 0xb02 <__floatsisf+0x54>
     afa:	9e e8       	ldi	r25, 0x8E	; 142
     afc:	87 2f       	mov	r24, r23
     afe:	76 2f       	mov	r23, r22
     b00:	05 c0       	rjmp	.+10     	; 0xb0c <__floatsisf+0x5e>
     b02:	66 23       	and	r22, r22
     b04:	71 f0       	breq	.+28     	; 0xb22 <__floatsisf+0x74>
     b06:	96 e8       	ldi	r25, 0x86	; 134
     b08:	86 2f       	mov	r24, r22
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	2a f0       	brmi	.+10     	; 0xb1a <__floatsisf+0x6c>
     b10:	9a 95       	dec	r25
     b12:	66 0f       	add	r22, r22
     b14:	77 1f       	adc	r23, r23
     b16:	88 1f       	adc	r24, r24
     b18:	da f7       	brpl	.-10     	; 0xb10 <__floatsisf+0x62>
     b1a:	88 0f       	add	r24, r24
     b1c:	96 95       	lsr	r25
     b1e:	87 95       	ror	r24
     b20:	97 f9       	bld	r25, 7
     b22:	08 95       	ret

00000b24 <__fp_inf>:
     b24:	97 f9       	bld	r25, 7
     b26:	9f 67       	ori	r25, 0x7F	; 127
     b28:	80 e8       	ldi	r24, 0x80	; 128
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	08 95       	ret

00000b30 <__fp_nan>:
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	80 ec       	ldi	r24, 0xC0	; 192
     b34:	08 95       	ret

00000b36 <__fp_pscA>:
     b36:	00 24       	eor	r0, r0
     b38:	0a 94       	dec	r0
     b3a:	16 16       	cp	r1, r22
     b3c:	17 06       	cpc	r1, r23
     b3e:	18 06       	cpc	r1, r24
     b40:	09 06       	cpc	r0, r25
     b42:	08 95       	ret

00000b44 <__fp_pscB>:
     b44:	00 24       	eor	r0, r0
     b46:	0a 94       	dec	r0
     b48:	12 16       	cp	r1, r18
     b4a:	13 06       	cpc	r1, r19
     b4c:	14 06       	cpc	r1, r20
     b4e:	05 06       	cpc	r0, r21
     b50:	08 95       	ret

00000b52 <__fp_round>:
     b52:	09 2e       	mov	r0, r25
     b54:	03 94       	inc	r0
     b56:	00 0c       	add	r0, r0
     b58:	11 f4       	brne	.+4      	; 0xb5e <__fp_round+0xc>
     b5a:	88 23       	and	r24, r24
     b5c:	52 f0       	brmi	.+20     	; 0xb72 <__fp_round+0x20>
     b5e:	bb 0f       	add	r27, r27
     b60:	40 f4       	brcc	.+16     	; 0xb72 <__fp_round+0x20>
     b62:	bf 2b       	or	r27, r31
     b64:	11 f4       	brne	.+4      	; 0xb6a <__fp_round+0x18>
     b66:	60 ff       	sbrs	r22, 0
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <__fp_round+0x20>
     b6a:	6f 5f       	subi	r22, 0xFF	; 255
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	8f 4f       	sbci	r24, 0xFF	; 255
     b70:	9f 4f       	sbci	r25, 0xFF	; 255
     b72:	08 95       	ret

00000b74 <__fp_split3>:
     b74:	57 fd       	sbrc	r21, 7
     b76:	90 58       	subi	r25, 0x80	; 128
     b78:	44 0f       	add	r20, r20
     b7a:	55 1f       	adc	r21, r21
     b7c:	59 f0       	breq	.+22     	; 0xb94 <__fp_splitA+0x10>
     b7e:	5f 3f       	cpi	r21, 0xFF	; 255
     b80:	71 f0       	breq	.+28     	; 0xb9e <__fp_splitA+0x1a>
     b82:	47 95       	ror	r20

00000b84 <__fp_splitA>:
     b84:	88 0f       	add	r24, r24
     b86:	97 fb       	bst	r25, 7
     b88:	99 1f       	adc	r25, r25
     b8a:	61 f0       	breq	.+24     	; 0xba4 <__fp_splitA+0x20>
     b8c:	9f 3f       	cpi	r25, 0xFF	; 255
     b8e:	79 f0       	breq	.+30     	; 0xbae <__fp_splitA+0x2a>
     b90:	87 95       	ror	r24
     b92:	08 95       	ret
     b94:	12 16       	cp	r1, r18
     b96:	13 06       	cpc	r1, r19
     b98:	14 06       	cpc	r1, r20
     b9a:	55 1f       	adc	r21, r21
     b9c:	f2 cf       	rjmp	.-28     	; 0xb82 <__fp_split3+0xe>
     b9e:	46 95       	lsr	r20
     ba0:	f1 df       	rcall	.-30     	; 0xb84 <__fp_splitA>
     ba2:	08 c0       	rjmp	.+16     	; 0xbb4 <__fp_splitA+0x30>
     ba4:	16 16       	cp	r1, r22
     ba6:	17 06       	cpc	r1, r23
     ba8:	18 06       	cpc	r1, r24
     baa:	99 1f       	adc	r25, r25
     bac:	f1 cf       	rjmp	.-30     	; 0xb90 <__fp_splitA+0xc>
     bae:	86 95       	lsr	r24
     bb0:	71 05       	cpc	r23, r1
     bb2:	61 05       	cpc	r22, r1
     bb4:	08 94       	sec
     bb6:	08 95       	ret

00000bb8 <__fp_zero>:
     bb8:	e8 94       	clt

00000bba <__fp_szero>:
     bba:	bb 27       	eor	r27, r27
     bbc:	66 27       	eor	r22, r22
     bbe:	77 27       	eor	r23, r23
     bc0:	cb 01       	movw	r24, r22
     bc2:	97 f9       	bld	r25, 7
     bc4:	08 95       	ret

00000bc6 <__mulsf3>:
     bc6:	0b d0       	rcall	.+22     	; 0xbde <__mulsf3x>
     bc8:	c4 cf       	rjmp	.-120    	; 0xb52 <__fp_round>
     bca:	b5 df       	rcall	.-150    	; 0xb36 <__fp_pscA>
     bcc:	28 f0       	brcs	.+10     	; 0xbd8 <__mulsf3+0x12>
     bce:	ba df       	rcall	.-140    	; 0xb44 <__fp_pscB>
     bd0:	18 f0       	brcs	.+6      	; 0xbd8 <__mulsf3+0x12>
     bd2:	95 23       	and	r25, r21
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <__mulsf3+0x12>
     bd6:	a6 cf       	rjmp	.-180    	; 0xb24 <__fp_inf>
     bd8:	ab cf       	rjmp	.-170    	; 0xb30 <__fp_nan>
     bda:	11 24       	eor	r1, r1
     bdc:	ee cf       	rjmp	.-36     	; 0xbba <__fp_szero>

00000bde <__mulsf3x>:
     bde:	ca df       	rcall	.-108    	; 0xb74 <__fp_split3>
     be0:	a0 f3       	brcs	.-24     	; 0xbca <__mulsf3+0x4>

00000be2 <__mulsf3_pse>:
     be2:	95 9f       	mul	r25, r21
     be4:	d1 f3       	breq	.-12     	; 0xbda <__mulsf3+0x14>
     be6:	95 0f       	add	r25, r21
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	55 1f       	adc	r21, r21
     bec:	62 9f       	mul	r22, r18
     bee:	f0 01       	movw	r30, r0
     bf0:	72 9f       	mul	r23, r18
     bf2:	bb 27       	eor	r27, r27
     bf4:	f0 0d       	add	r31, r0
     bf6:	b1 1d       	adc	r27, r1
     bf8:	63 9f       	mul	r22, r19
     bfa:	aa 27       	eor	r26, r26
     bfc:	f0 0d       	add	r31, r0
     bfe:	b1 1d       	adc	r27, r1
     c00:	aa 1f       	adc	r26, r26
     c02:	64 9f       	mul	r22, r20
     c04:	66 27       	eor	r22, r22
     c06:	b0 0d       	add	r27, r0
     c08:	a1 1d       	adc	r26, r1
     c0a:	66 1f       	adc	r22, r22
     c0c:	82 9f       	mul	r24, r18
     c0e:	22 27       	eor	r18, r18
     c10:	b0 0d       	add	r27, r0
     c12:	a1 1d       	adc	r26, r1
     c14:	62 1f       	adc	r22, r18
     c16:	73 9f       	mul	r23, r19
     c18:	b0 0d       	add	r27, r0
     c1a:	a1 1d       	adc	r26, r1
     c1c:	62 1f       	adc	r22, r18
     c1e:	83 9f       	mul	r24, r19
     c20:	a0 0d       	add	r26, r0
     c22:	61 1d       	adc	r22, r1
     c24:	22 1f       	adc	r18, r18
     c26:	74 9f       	mul	r23, r20
     c28:	33 27       	eor	r19, r19
     c2a:	a0 0d       	add	r26, r0
     c2c:	61 1d       	adc	r22, r1
     c2e:	23 1f       	adc	r18, r19
     c30:	84 9f       	mul	r24, r20
     c32:	60 0d       	add	r22, r0
     c34:	21 1d       	adc	r18, r1
     c36:	82 2f       	mov	r24, r18
     c38:	76 2f       	mov	r23, r22
     c3a:	6a 2f       	mov	r22, r26
     c3c:	11 24       	eor	r1, r1
     c3e:	9f 57       	subi	r25, 0x7F	; 127
     c40:	50 40       	sbci	r21, 0x00	; 0
     c42:	8a f0       	brmi	.+34     	; 0xc66 <__mulsf3_pse+0x84>
     c44:	e1 f0       	breq	.+56     	; 0xc7e <__mulsf3_pse+0x9c>
     c46:	88 23       	and	r24, r24
     c48:	4a f0       	brmi	.+18     	; 0xc5c <__mulsf3_pse+0x7a>
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	bb 1f       	adc	r27, r27
     c50:	66 1f       	adc	r22, r22
     c52:	77 1f       	adc	r23, r23
     c54:	88 1f       	adc	r24, r24
     c56:	91 50       	subi	r25, 0x01	; 1
     c58:	50 40       	sbci	r21, 0x00	; 0
     c5a:	a9 f7       	brne	.-22     	; 0xc46 <__mulsf3_pse+0x64>
     c5c:	9e 3f       	cpi	r25, 0xFE	; 254
     c5e:	51 05       	cpc	r21, r1
     c60:	70 f0       	brcs	.+28     	; 0xc7e <__mulsf3_pse+0x9c>
     c62:	60 cf       	rjmp	.-320    	; 0xb24 <__fp_inf>
     c64:	aa cf       	rjmp	.-172    	; 0xbba <__fp_szero>
     c66:	5f 3f       	cpi	r21, 0xFF	; 255
     c68:	ec f3       	brlt	.-6      	; 0xc64 <__mulsf3_pse+0x82>
     c6a:	98 3e       	cpi	r25, 0xE8	; 232
     c6c:	dc f3       	brlt	.-10     	; 0xc64 <__mulsf3_pse+0x82>
     c6e:	86 95       	lsr	r24
     c70:	77 95       	ror	r23
     c72:	67 95       	ror	r22
     c74:	b7 95       	ror	r27
     c76:	f7 95       	ror	r31
     c78:	e7 95       	ror	r30
     c7a:	9f 5f       	subi	r25, 0xFF	; 255
     c7c:	c1 f7       	brne	.-16     	; 0xc6e <__mulsf3_pse+0x8c>
     c7e:	fe 2b       	or	r31, r30
     c80:	88 0f       	add	r24, r24
     c82:	91 1d       	adc	r25, r1
     c84:	96 95       	lsr	r25
     c86:	87 95       	ror	r24
     c88:	97 f9       	bld	r25, 7
     c8a:	08 95       	ret

00000c8c <sprintf>:
     c8c:	ae e0       	ldi	r26, 0x0E	; 14
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	ec e4       	ldi	r30, 0x4C	; 76
     c92:	f6 e0       	ldi	r31, 0x06	; 6
     c94:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__prologue_saves__+0x1c>
     c98:	0d 89       	ldd	r16, Y+21	; 0x15
     c9a:	1e 89       	ldd	r17, Y+22	; 0x16
     c9c:	86 e0       	ldi	r24, 0x06	; 6
     c9e:	8c 83       	std	Y+4, r24	; 0x04
     ca0:	1a 83       	std	Y+2, r17	; 0x02
     ca2:	09 83       	std	Y+1, r16	; 0x01
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	9f e7       	ldi	r25, 0x7F	; 127
     ca8:	9e 83       	std	Y+6, r25	; 0x06
     caa:	8d 83       	std	Y+5, r24	; 0x05
     cac:	ae 01       	movw	r20, r28
     cae:	47 5e       	subi	r20, 0xE7	; 231
     cb0:	5f 4f       	sbci	r21, 0xFF	; 255
     cb2:	6f 89       	ldd	r22, Y+23	; 0x17
     cb4:	78 8d       	ldd	r23, Y+24	; 0x18
     cb6:	ce 01       	movw	r24, r28
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	0e 94 68 06 	call	0xcd0	; 0xcd0 <vfprintf>
     cbe:	ef 81       	ldd	r30, Y+7	; 0x07
     cc0:	f8 85       	ldd	r31, Y+8	; 0x08
     cc2:	e0 0f       	add	r30, r16
     cc4:	f1 1f       	adc	r31, r17
     cc6:	10 82       	st	Z, r1
     cc8:	2e 96       	adiw	r28, 0x0e	; 14
     cca:	e4 e0       	ldi	r30, 0x04	; 4
     ccc:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__epilogue_restores__+0x1c>

00000cd0 <vfprintf>:
     cd0:	ac e0       	ldi	r26, 0x0C	; 12
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ee e6       	ldi	r30, 0x6E	; 110
     cd6:	f6 e0       	ldi	r31, 0x06	; 6
     cd8:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__prologue_saves__>
     cdc:	7c 01       	movw	r14, r24
     cde:	6b 01       	movw	r12, r22
     ce0:	8a 01       	movw	r16, r20
     ce2:	fc 01       	movw	r30, r24
     ce4:	17 82       	std	Z+7, r1	; 0x07
     ce6:	16 82       	std	Z+6, r1	; 0x06
     ce8:	83 81       	ldd	r24, Z+3	; 0x03
     cea:	81 ff       	sbrs	r24, 1
     cec:	bd c1       	rjmp	.+890    	; 0x1068 <vfprintf+0x398>
     cee:	ce 01       	movw	r24, r28
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	4c 01       	movw	r8, r24
     cf4:	f7 01       	movw	r30, r14
     cf6:	93 81       	ldd	r25, Z+3	; 0x03
     cf8:	f6 01       	movw	r30, r12
     cfa:	93 fd       	sbrc	r25, 3
     cfc:	85 91       	lpm	r24, Z+
     cfe:	93 ff       	sbrs	r25, 3
     d00:	81 91       	ld	r24, Z+
     d02:	6f 01       	movw	r12, r30
     d04:	88 23       	and	r24, r24
     d06:	09 f4       	brne	.+2      	; 0xd0a <vfprintf+0x3a>
     d08:	ab c1       	rjmp	.+854    	; 0x1060 <vfprintf+0x390>
     d0a:	85 32       	cpi	r24, 0x25	; 37
     d0c:	39 f4       	brne	.+14     	; 0xd1c <vfprintf+0x4c>
     d0e:	93 fd       	sbrc	r25, 3
     d10:	85 91       	lpm	r24, Z+
     d12:	93 ff       	sbrs	r25, 3
     d14:	81 91       	ld	r24, Z+
     d16:	6f 01       	movw	r12, r30
     d18:	85 32       	cpi	r24, 0x25	; 37
     d1a:	29 f4       	brne	.+10     	; 0xd26 <vfprintf+0x56>
     d1c:	b7 01       	movw	r22, r14
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
     d24:	e7 cf       	rjmp	.-50     	; 0xcf4 <vfprintf+0x24>
     d26:	51 2c       	mov	r5, r1
     d28:	31 2c       	mov	r3, r1
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	20 32       	cpi	r18, 0x20	; 32
     d2e:	a0 f4       	brcc	.+40     	; 0xd58 <vfprintf+0x88>
     d30:	8b 32       	cpi	r24, 0x2B	; 43
     d32:	69 f0       	breq	.+26     	; 0xd4e <vfprintf+0x7e>
     d34:	30 f4       	brcc	.+12     	; 0xd42 <vfprintf+0x72>
     d36:	80 32       	cpi	r24, 0x20	; 32
     d38:	59 f0       	breq	.+22     	; 0xd50 <vfprintf+0x80>
     d3a:	83 32       	cpi	r24, 0x23	; 35
     d3c:	69 f4       	brne	.+26     	; 0xd58 <vfprintf+0x88>
     d3e:	20 61       	ori	r18, 0x10	; 16
     d40:	2c c0       	rjmp	.+88     	; 0xd9a <vfprintf+0xca>
     d42:	8d 32       	cpi	r24, 0x2D	; 45
     d44:	39 f0       	breq	.+14     	; 0xd54 <vfprintf+0x84>
     d46:	80 33       	cpi	r24, 0x30	; 48
     d48:	39 f4       	brne	.+14     	; 0xd58 <vfprintf+0x88>
     d4a:	21 60       	ori	r18, 0x01	; 1
     d4c:	26 c0       	rjmp	.+76     	; 0xd9a <vfprintf+0xca>
     d4e:	22 60       	ori	r18, 0x02	; 2
     d50:	24 60       	ori	r18, 0x04	; 4
     d52:	23 c0       	rjmp	.+70     	; 0xd9a <vfprintf+0xca>
     d54:	28 60       	ori	r18, 0x08	; 8
     d56:	21 c0       	rjmp	.+66     	; 0xd9a <vfprintf+0xca>
     d58:	27 fd       	sbrc	r18, 7
     d5a:	27 c0       	rjmp	.+78     	; 0xdaa <vfprintf+0xda>
     d5c:	30 ed       	ldi	r19, 0xD0	; 208
     d5e:	38 0f       	add	r19, r24
     d60:	3a 30       	cpi	r19, 0x0A	; 10
     d62:	78 f4       	brcc	.+30     	; 0xd82 <vfprintf+0xb2>
     d64:	26 ff       	sbrs	r18, 6
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <vfprintf+0xa4>
     d68:	fa e0       	ldi	r31, 0x0A	; 10
     d6a:	5f 9e       	mul	r5, r31
     d6c:	30 0d       	add	r19, r0
     d6e:	11 24       	eor	r1, r1
     d70:	53 2e       	mov	r5, r19
     d72:	13 c0       	rjmp	.+38     	; 0xd9a <vfprintf+0xca>
     d74:	8a e0       	ldi	r24, 0x0A	; 10
     d76:	38 9e       	mul	r3, r24
     d78:	30 0d       	add	r19, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	33 2e       	mov	r3, r19
     d7e:	20 62       	ori	r18, 0x20	; 32
     d80:	0c c0       	rjmp	.+24     	; 0xd9a <vfprintf+0xca>
     d82:	8e 32       	cpi	r24, 0x2E	; 46
     d84:	21 f4       	brne	.+8      	; 0xd8e <vfprintf+0xbe>
     d86:	26 fd       	sbrc	r18, 6
     d88:	6b c1       	rjmp	.+726    	; 0x1060 <vfprintf+0x390>
     d8a:	20 64       	ori	r18, 0x40	; 64
     d8c:	06 c0       	rjmp	.+12     	; 0xd9a <vfprintf+0xca>
     d8e:	8c 36       	cpi	r24, 0x6C	; 108
     d90:	11 f4       	brne	.+4      	; 0xd96 <vfprintf+0xc6>
     d92:	20 68       	ori	r18, 0x80	; 128
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0xca>
     d96:	88 36       	cpi	r24, 0x68	; 104
     d98:	41 f4       	brne	.+16     	; 0xdaa <vfprintf+0xda>
     d9a:	f6 01       	movw	r30, r12
     d9c:	93 fd       	sbrc	r25, 3
     d9e:	85 91       	lpm	r24, Z+
     da0:	93 ff       	sbrs	r25, 3
     da2:	81 91       	ld	r24, Z+
     da4:	6f 01       	movw	r12, r30
     da6:	81 11       	cpse	r24, r1
     da8:	c1 cf       	rjmp	.-126    	; 0xd2c <vfprintf+0x5c>
     daa:	98 2f       	mov	r25, r24
     dac:	9f 7d       	andi	r25, 0xDF	; 223
     dae:	95 54       	subi	r25, 0x45	; 69
     db0:	93 30       	cpi	r25, 0x03	; 3
     db2:	28 f4       	brcc	.+10     	; 0xdbe <vfprintf+0xee>
     db4:	0c 5f       	subi	r16, 0xFC	; 252
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	ff e3       	ldi	r31, 0x3F	; 63
     dba:	f9 83       	std	Y+1, r31	; 0x01
     dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <vfprintf+0x108>
     dbe:	83 36       	cpi	r24, 0x63	; 99
     dc0:	31 f0       	breq	.+12     	; 0xdce <vfprintf+0xfe>
     dc2:	83 37       	cpi	r24, 0x73	; 115
     dc4:	71 f0       	breq	.+28     	; 0xde2 <vfprintf+0x112>
     dc6:	83 35       	cpi	r24, 0x53	; 83
     dc8:	09 f0       	breq	.+2      	; 0xdcc <vfprintf+0xfc>
     dca:	5b c0       	rjmp	.+182    	; 0xe82 <vfprintf+0x1b2>
     dcc:	22 c0       	rjmp	.+68     	; 0xe12 <vfprintf+0x142>
     dce:	f8 01       	movw	r30, r16
     dd0:	80 81       	ld	r24, Z
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	0e 5f       	subi	r16, 0xFE	; 254
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	44 24       	eor	r4, r4
     dda:	43 94       	inc	r4
     ddc:	51 2c       	mov	r5, r1
     dde:	54 01       	movw	r10, r8
     de0:	15 c0       	rjmp	.+42     	; 0xe0c <vfprintf+0x13c>
     de2:	38 01       	movw	r6, r16
     de4:	f2 e0       	ldi	r31, 0x02	; 2
     de6:	6f 0e       	add	r6, r31
     de8:	71 1c       	adc	r7, r1
     dea:	f8 01       	movw	r30, r16
     dec:	a0 80       	ld	r10, Z
     dee:	b1 80       	ldd	r11, Z+1	; 0x01
     df0:	26 ff       	sbrs	r18, 6
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <vfprintf+0x12a>
     df4:	65 2d       	mov	r22, r5
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <vfprintf+0x12e>
     dfa:	6f ef       	ldi	r22, 0xFF	; 255
     dfc:	7f ef       	ldi	r23, 0xFF	; 255
     dfe:	c5 01       	movw	r24, r10
     e00:	2c 87       	std	Y+12, r18	; 0x0c
     e02:	0e 94 45 08 	call	0x108a	; 0x108a <strnlen>
     e06:	2c 01       	movw	r4, r24
     e08:	83 01       	movw	r16, r6
     e0a:	2c 85       	ldd	r18, Y+12	; 0x0c
     e0c:	2f 77       	andi	r18, 0x7F	; 127
     e0e:	22 2e       	mov	r2, r18
     e10:	17 c0       	rjmp	.+46     	; 0xe40 <vfprintf+0x170>
     e12:	38 01       	movw	r6, r16
     e14:	f2 e0       	ldi	r31, 0x02	; 2
     e16:	6f 0e       	add	r6, r31
     e18:	71 1c       	adc	r7, r1
     e1a:	f8 01       	movw	r30, r16
     e1c:	a0 80       	ld	r10, Z
     e1e:	b1 80       	ldd	r11, Z+1	; 0x01
     e20:	26 ff       	sbrs	r18, 6
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <vfprintf+0x15a>
     e24:	65 2d       	mov	r22, r5
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x15e>
     e2a:	6f ef       	ldi	r22, 0xFF	; 255
     e2c:	7f ef       	ldi	r23, 0xFF	; 255
     e2e:	c5 01       	movw	r24, r10
     e30:	2c 87       	std	Y+12, r18	; 0x0c
     e32:	0e 94 3a 08 	call	0x1074	; 0x1074 <strnlen_P>
     e36:	2c 01       	movw	r4, r24
     e38:	2c 85       	ldd	r18, Y+12	; 0x0c
     e3a:	20 68       	ori	r18, 0x80	; 128
     e3c:	22 2e       	mov	r2, r18
     e3e:	83 01       	movw	r16, r6
     e40:	23 fc       	sbrc	r2, 3
     e42:	1b c0       	rjmp	.+54     	; 0xe7a <vfprintf+0x1aa>
     e44:	83 2d       	mov	r24, r3
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	48 16       	cp	r4, r24
     e4a:	59 06       	cpc	r5, r25
     e4c:	b0 f4       	brcc	.+44     	; 0xe7a <vfprintf+0x1aa>
     e4e:	b7 01       	movw	r22, r14
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
     e58:	3a 94       	dec	r3
     e5a:	f4 cf       	rjmp	.-24     	; 0xe44 <vfprintf+0x174>
     e5c:	f5 01       	movw	r30, r10
     e5e:	27 fc       	sbrc	r2, 7
     e60:	85 91       	lpm	r24, Z+
     e62:	27 fe       	sbrs	r2, 7
     e64:	81 91       	ld	r24, Z+
     e66:	5f 01       	movw	r10, r30
     e68:	b7 01       	movw	r22, r14
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
     e70:	31 10       	cpse	r3, r1
     e72:	3a 94       	dec	r3
     e74:	f1 e0       	ldi	r31, 0x01	; 1
     e76:	4f 1a       	sub	r4, r31
     e78:	51 08       	sbc	r5, r1
     e7a:	41 14       	cp	r4, r1
     e7c:	51 04       	cpc	r5, r1
     e7e:	71 f7       	brne	.-36     	; 0xe5c <vfprintf+0x18c>
     e80:	e5 c0       	rjmp	.+458    	; 0x104c <vfprintf+0x37c>
     e82:	84 36       	cpi	r24, 0x64	; 100
     e84:	11 f0       	breq	.+4      	; 0xe8a <vfprintf+0x1ba>
     e86:	89 36       	cpi	r24, 0x69	; 105
     e88:	39 f5       	brne	.+78     	; 0xed8 <vfprintf+0x208>
     e8a:	f8 01       	movw	r30, r16
     e8c:	27 ff       	sbrs	r18, 7
     e8e:	07 c0       	rjmp	.+14     	; 0xe9e <vfprintf+0x1ce>
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	0c 5f       	subi	r16, 0xFC	; 252
     e9a:	1f 4f       	sbci	r17, 0xFF	; 255
     e9c:	08 c0       	rjmp	.+16     	; 0xeae <vfprintf+0x1de>
     e9e:	60 81       	ld	r22, Z
     ea0:	71 81       	ldd	r23, Z+1	; 0x01
     ea2:	88 27       	eor	r24, r24
     ea4:	77 fd       	sbrc	r23, 7
     ea6:	80 95       	com	r24
     ea8:	98 2f       	mov	r25, r24
     eaa:	0e 5f       	subi	r16, 0xFE	; 254
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	2f 76       	andi	r18, 0x6F	; 111
     eb0:	b2 2e       	mov	r11, r18
     eb2:	97 ff       	sbrs	r25, 7
     eb4:	09 c0       	rjmp	.+18     	; 0xec8 <vfprintf+0x1f8>
     eb6:	90 95       	com	r25
     eb8:	80 95       	com	r24
     eba:	70 95       	com	r23
     ebc:	61 95       	neg	r22
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	8f 4f       	sbci	r24, 0xFF	; 255
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	20 68       	ori	r18, 0x80	; 128
     ec6:	b2 2e       	mov	r11, r18
     ec8:	2a e0       	ldi	r18, 0x0A	; 10
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	a4 01       	movw	r20, r8
     ece:	0e 94 82 08 	call	0x1104	; 0x1104 <__ultoa_invert>
     ed2:	a8 2e       	mov	r10, r24
     ed4:	a8 18       	sub	r10, r8
     ed6:	44 c0       	rjmp	.+136    	; 0xf60 <vfprintf+0x290>
     ed8:	85 37       	cpi	r24, 0x75	; 117
     eda:	29 f4       	brne	.+10     	; 0xee6 <vfprintf+0x216>
     edc:	2f 7e       	andi	r18, 0xEF	; 239
     ede:	b2 2e       	mov	r11, r18
     ee0:	2a e0       	ldi	r18, 0x0A	; 10
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	25 c0       	rjmp	.+74     	; 0xf30 <vfprintf+0x260>
     ee6:	f2 2f       	mov	r31, r18
     ee8:	f9 7f       	andi	r31, 0xF9	; 249
     eea:	bf 2e       	mov	r11, r31
     eec:	8f 36       	cpi	r24, 0x6F	; 111
     eee:	c1 f0       	breq	.+48     	; 0xf20 <vfprintf+0x250>
     ef0:	18 f4       	brcc	.+6      	; 0xef8 <vfprintf+0x228>
     ef2:	88 35       	cpi	r24, 0x58	; 88
     ef4:	79 f0       	breq	.+30     	; 0xf14 <vfprintf+0x244>
     ef6:	b4 c0       	rjmp	.+360    	; 0x1060 <vfprintf+0x390>
     ef8:	80 37       	cpi	r24, 0x70	; 112
     efa:	19 f0       	breq	.+6      	; 0xf02 <vfprintf+0x232>
     efc:	88 37       	cpi	r24, 0x78	; 120
     efe:	21 f0       	breq	.+8      	; 0xf08 <vfprintf+0x238>
     f00:	af c0       	rjmp	.+350    	; 0x1060 <vfprintf+0x390>
     f02:	2f 2f       	mov	r18, r31
     f04:	20 61       	ori	r18, 0x10	; 16
     f06:	b2 2e       	mov	r11, r18
     f08:	b4 fe       	sbrs	r11, 4
     f0a:	0d c0       	rjmp	.+26     	; 0xf26 <vfprintf+0x256>
     f0c:	8b 2d       	mov	r24, r11
     f0e:	84 60       	ori	r24, 0x04	; 4
     f10:	b8 2e       	mov	r11, r24
     f12:	09 c0       	rjmp	.+18     	; 0xf26 <vfprintf+0x256>
     f14:	24 ff       	sbrs	r18, 4
     f16:	0a c0       	rjmp	.+20     	; 0xf2c <vfprintf+0x25c>
     f18:	9f 2f       	mov	r25, r31
     f1a:	96 60       	ori	r25, 0x06	; 6
     f1c:	b9 2e       	mov	r11, r25
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <vfprintf+0x25c>
     f20:	28 e0       	ldi	r18, 0x08	; 8
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	05 c0       	rjmp	.+10     	; 0xf30 <vfprintf+0x260>
     f26:	20 e1       	ldi	r18, 0x10	; 16
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <vfprintf+0x260>
     f2c:	20 e1       	ldi	r18, 0x10	; 16
     f2e:	32 e0       	ldi	r19, 0x02	; 2
     f30:	f8 01       	movw	r30, r16
     f32:	b7 fe       	sbrs	r11, 7
     f34:	07 c0       	rjmp	.+14     	; 0xf44 <vfprintf+0x274>
     f36:	60 81       	ld	r22, Z
     f38:	71 81       	ldd	r23, Z+1	; 0x01
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	0c 5f       	subi	r16, 0xFC	; 252
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <vfprintf+0x280>
     f44:	60 81       	ld	r22, Z
     f46:	71 81       	ldd	r23, Z+1	; 0x01
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 5f       	subi	r16, 0xFE	; 254
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	a4 01       	movw	r20, r8
     f52:	0e 94 82 08 	call	0x1104	; 0x1104 <__ultoa_invert>
     f56:	a8 2e       	mov	r10, r24
     f58:	a8 18       	sub	r10, r8
     f5a:	fb 2d       	mov	r31, r11
     f5c:	ff 77       	andi	r31, 0x7F	; 127
     f5e:	bf 2e       	mov	r11, r31
     f60:	b6 fe       	sbrs	r11, 6
     f62:	0b c0       	rjmp	.+22     	; 0xf7a <vfprintf+0x2aa>
     f64:	2b 2d       	mov	r18, r11
     f66:	2e 7f       	andi	r18, 0xFE	; 254
     f68:	a5 14       	cp	r10, r5
     f6a:	50 f4       	brcc	.+20     	; 0xf80 <vfprintf+0x2b0>
     f6c:	b4 fe       	sbrs	r11, 4
     f6e:	0a c0       	rjmp	.+20     	; 0xf84 <vfprintf+0x2b4>
     f70:	b2 fc       	sbrc	r11, 2
     f72:	08 c0       	rjmp	.+16     	; 0xf84 <vfprintf+0x2b4>
     f74:	2b 2d       	mov	r18, r11
     f76:	2e 7e       	andi	r18, 0xEE	; 238
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <vfprintf+0x2b4>
     f7a:	7a 2c       	mov	r7, r10
     f7c:	2b 2d       	mov	r18, r11
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <vfprintf+0x2b6>
     f80:	7a 2c       	mov	r7, r10
     f82:	01 c0       	rjmp	.+2      	; 0xf86 <vfprintf+0x2b6>
     f84:	75 2c       	mov	r7, r5
     f86:	24 ff       	sbrs	r18, 4
     f88:	0d c0       	rjmp	.+26     	; 0xfa4 <vfprintf+0x2d4>
     f8a:	fe 01       	movw	r30, r28
     f8c:	ea 0d       	add	r30, r10
     f8e:	f1 1d       	adc	r31, r1
     f90:	80 81       	ld	r24, Z
     f92:	80 33       	cpi	r24, 0x30	; 48
     f94:	11 f4       	brne	.+4      	; 0xf9a <vfprintf+0x2ca>
     f96:	29 7e       	andi	r18, 0xE9	; 233
     f98:	09 c0       	rjmp	.+18     	; 0xfac <vfprintf+0x2dc>
     f9a:	22 ff       	sbrs	r18, 2
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <vfprintf+0x2da>
     f9e:	73 94       	inc	r7
     fa0:	73 94       	inc	r7
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <vfprintf+0x2dc>
     fa4:	82 2f       	mov	r24, r18
     fa6:	86 78       	andi	r24, 0x86	; 134
     fa8:	09 f0       	breq	.+2      	; 0xfac <vfprintf+0x2dc>
     faa:	73 94       	inc	r7
     fac:	23 fd       	sbrc	r18, 3
     fae:	13 c0       	rjmp	.+38     	; 0xfd6 <vfprintf+0x306>
     fb0:	20 ff       	sbrs	r18, 0
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <vfprintf+0x2f0>
     fb4:	5a 2c       	mov	r5, r10
     fb6:	73 14       	cp	r7, r3
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <vfprintf+0x2f0>
     fba:	53 0c       	add	r5, r3
     fbc:	57 18       	sub	r5, r7
     fbe:	73 2c       	mov	r7, r3
     fc0:	73 14       	cp	r7, r3
     fc2:	68 f4       	brcc	.+26     	; 0xfde <vfprintf+0x30e>
     fc4:	b7 01       	movw	r22, r14
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	2c 87       	std	Y+12, r18	; 0x0c
     fcc:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
     fd0:	73 94       	inc	r7
     fd2:	2c 85       	ldd	r18, Y+12	; 0x0c
     fd4:	f5 cf       	rjmp	.-22     	; 0xfc0 <vfprintf+0x2f0>
     fd6:	73 14       	cp	r7, r3
     fd8:	10 f4       	brcc	.+4      	; 0xfde <vfprintf+0x30e>
     fda:	37 18       	sub	r3, r7
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <vfprintf+0x310>
     fde:	31 2c       	mov	r3, r1
     fe0:	24 ff       	sbrs	r18, 4
     fe2:	12 c0       	rjmp	.+36     	; 0x1008 <vfprintf+0x338>
     fe4:	b7 01       	movw	r22, r14
     fe6:	80 e3       	ldi	r24, 0x30	; 48
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	2c 87       	std	Y+12, r18	; 0x0c
     fec:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
     ff0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff2:	22 ff       	sbrs	r18, 2
     ff4:	17 c0       	rjmp	.+46     	; 0x1024 <vfprintf+0x354>
     ff6:	21 ff       	sbrs	r18, 1
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <vfprintf+0x330>
     ffa:	88 e5       	ldi	r24, 0x58	; 88
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <vfprintf+0x334>
    1000:	88 e7       	ldi	r24, 0x78	; 120
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	b7 01       	movw	r22, r14
    1006:	0c c0       	rjmp	.+24     	; 0x1020 <vfprintf+0x350>
    1008:	82 2f       	mov	r24, r18
    100a:	86 78       	andi	r24, 0x86	; 134
    100c:	59 f0       	breq	.+22     	; 0x1024 <vfprintf+0x354>
    100e:	21 fd       	sbrc	r18, 1
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <vfprintf+0x346>
    1012:	80 e2       	ldi	r24, 0x20	; 32
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <vfprintf+0x348>
    1016:	8b e2       	ldi	r24, 0x2B	; 43
    1018:	27 fd       	sbrc	r18, 7
    101a:	8d e2       	ldi	r24, 0x2D	; 45
    101c:	b7 01       	movw	r22, r14
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
    1024:	a5 14       	cp	r10, r5
    1026:	38 f4       	brcc	.+14     	; 0x1036 <vfprintf+0x366>
    1028:	b7 01       	movw	r22, r14
    102a:	80 e3       	ldi	r24, 0x30	; 48
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
    1032:	5a 94       	dec	r5
    1034:	f7 cf       	rjmp	.-18     	; 0x1024 <vfprintf+0x354>
    1036:	aa 94       	dec	r10
    1038:	f4 01       	movw	r30, r8
    103a:	ea 0d       	add	r30, r10
    103c:	f1 1d       	adc	r31, r1
    103e:	80 81       	ld	r24, Z
    1040:	b7 01       	movw	r22, r14
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
    1048:	a1 10       	cpse	r10, r1
    104a:	f5 cf       	rjmp	.-22     	; 0x1036 <vfprintf+0x366>
    104c:	33 20       	and	r3, r3
    104e:	09 f4       	brne	.+2      	; 0x1052 <vfprintf+0x382>
    1050:	51 ce       	rjmp	.-862    	; 0xcf4 <vfprintf+0x24>
    1052:	b7 01       	movw	r22, r14
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 50 08 	call	0x10a0	; 0x10a0 <fputc>
    105c:	3a 94       	dec	r3
    105e:	f6 cf       	rjmp	.-20     	; 0x104c <vfprintf+0x37c>
    1060:	f7 01       	movw	r30, r14
    1062:	86 81       	ldd	r24, Z+6	; 0x06
    1064:	97 81       	ldd	r25, Z+7	; 0x07
    1066:	02 c0       	rjmp	.+4      	; 0x106c <vfprintf+0x39c>
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	9f ef       	ldi	r25, 0xFF	; 255
    106c:	2c 96       	adiw	r28, 0x0c	; 12
    106e:	e2 e1       	ldi	r30, 0x12	; 18
    1070:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__epilogue_restores__>

00001074 <strnlen_P>:
    1074:	fc 01       	movw	r30, r24
    1076:	05 90       	lpm	r0, Z+
    1078:	61 50       	subi	r22, 0x01	; 1
    107a:	70 40       	sbci	r23, 0x00	; 0
    107c:	01 10       	cpse	r0, r1
    107e:	d8 f7       	brcc	.-10     	; 0x1076 <strnlen_P+0x2>
    1080:	80 95       	com	r24
    1082:	90 95       	com	r25
    1084:	8e 0f       	add	r24, r30
    1086:	9f 1f       	adc	r25, r31
    1088:	08 95       	ret

0000108a <strnlen>:
    108a:	fc 01       	movw	r30, r24
    108c:	61 50       	subi	r22, 0x01	; 1
    108e:	70 40       	sbci	r23, 0x00	; 0
    1090:	01 90       	ld	r0, Z+
    1092:	01 10       	cpse	r0, r1
    1094:	d8 f7       	brcc	.-10     	; 0x108c <strnlen+0x2>
    1096:	80 95       	com	r24
    1098:	90 95       	com	r25
    109a:	8e 0f       	add	r24, r30
    109c:	9f 1f       	adc	r25, r31
    109e:	08 95       	ret

000010a0 <fputc>:
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	18 2f       	mov	r17, r24
    10aa:	09 2f       	mov	r16, r25
    10ac:	eb 01       	movw	r28, r22
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	81 fd       	sbrc	r24, 1
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <fputc+0x1a>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	20 c0       	rjmp	.+64     	; 0x10fa <fputc+0x5a>
    10ba:	82 ff       	sbrs	r24, 2
    10bc:	10 c0       	rjmp	.+32     	; 0x10de <fputc+0x3e>
    10be:	4e 81       	ldd	r20, Y+6	; 0x06
    10c0:	5f 81       	ldd	r21, Y+7	; 0x07
    10c2:	2c 81       	ldd	r18, Y+4	; 0x04
    10c4:	3d 81       	ldd	r19, Y+5	; 0x05
    10c6:	42 17       	cp	r20, r18
    10c8:	53 07       	cpc	r21, r19
    10ca:	7c f4       	brge	.+30     	; 0x10ea <fputc+0x4a>
    10cc:	e8 81       	ld	r30, Y
    10ce:	f9 81       	ldd	r31, Y+1	; 0x01
    10d0:	9f 01       	movw	r18, r30
    10d2:	2f 5f       	subi	r18, 0xFF	; 255
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	39 83       	std	Y+1, r19	; 0x01
    10d8:	28 83       	st	Y, r18
    10da:	10 83       	st	Z, r17
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <fputc+0x4a>
    10de:	e8 85       	ldd	r30, Y+8	; 0x08
    10e0:	f9 85       	ldd	r31, Y+9	; 0x09
    10e2:	81 2f       	mov	r24, r17
    10e4:	09 95       	icall
    10e6:	89 2b       	or	r24, r25
    10e8:	29 f7       	brne	.-54     	; 0x10b4 <fputc+0x14>
    10ea:	2e 81       	ldd	r18, Y+6	; 0x06
    10ec:	3f 81       	ldd	r19, Y+7	; 0x07
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	3f 83       	std	Y+7, r19	; 0x07
    10f4:	2e 83       	std	Y+6, r18	; 0x06
    10f6:	81 2f       	mov	r24, r17
    10f8:	90 2f       	mov	r25, r16
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	08 95       	ret

00001104 <__ultoa_invert>:
    1104:	fa 01       	movw	r30, r20
    1106:	aa 27       	eor	r26, r26
    1108:	28 30       	cpi	r18, 0x08	; 8
    110a:	51 f1       	breq	.+84     	; 0x1160 <__ultoa_invert+0x5c>
    110c:	20 31       	cpi	r18, 0x10	; 16
    110e:	81 f1       	breq	.+96     	; 0x1170 <__ultoa_invert+0x6c>
    1110:	e8 94       	clt
    1112:	6f 93       	push	r22
    1114:	6e 7f       	andi	r22, 0xFE	; 254
    1116:	6e 5f       	subi	r22, 0xFE	; 254
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	8f 4f       	sbci	r24, 0xFF	; 255
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	af 4f       	sbci	r26, 0xFF	; 255
    1120:	b1 e0       	ldi	r27, 0x01	; 1
    1122:	3e d0       	rcall	.+124    	; 0x11a0 <__ultoa_invert+0x9c>
    1124:	b4 e0       	ldi	r27, 0x04	; 4
    1126:	3c d0       	rcall	.+120    	; 0x11a0 <__ultoa_invert+0x9c>
    1128:	67 0f       	add	r22, r23
    112a:	78 1f       	adc	r23, r24
    112c:	89 1f       	adc	r24, r25
    112e:	9a 1f       	adc	r25, r26
    1130:	a1 1d       	adc	r26, r1
    1132:	68 0f       	add	r22, r24
    1134:	79 1f       	adc	r23, r25
    1136:	8a 1f       	adc	r24, r26
    1138:	91 1d       	adc	r25, r1
    113a:	a1 1d       	adc	r26, r1
    113c:	6a 0f       	add	r22, r26
    113e:	71 1d       	adc	r23, r1
    1140:	81 1d       	adc	r24, r1
    1142:	91 1d       	adc	r25, r1
    1144:	a1 1d       	adc	r26, r1
    1146:	20 d0       	rcall	.+64     	; 0x1188 <__ultoa_invert+0x84>
    1148:	09 f4       	brne	.+2      	; 0x114c <__ultoa_invert+0x48>
    114a:	68 94       	set
    114c:	3f 91       	pop	r19
    114e:	2a e0       	ldi	r18, 0x0A	; 10
    1150:	26 9f       	mul	r18, r22
    1152:	11 24       	eor	r1, r1
    1154:	30 19       	sub	r19, r0
    1156:	30 5d       	subi	r19, 0xD0	; 208
    1158:	31 93       	st	Z+, r19
    115a:	de f6       	brtc	.-74     	; 0x1112 <__ultoa_invert+0xe>
    115c:	cf 01       	movw	r24, r30
    115e:	08 95       	ret
    1160:	46 2f       	mov	r20, r22
    1162:	47 70       	andi	r20, 0x07	; 7
    1164:	40 5d       	subi	r20, 0xD0	; 208
    1166:	41 93       	st	Z+, r20
    1168:	b3 e0       	ldi	r27, 0x03	; 3
    116a:	0f d0       	rcall	.+30     	; 0x118a <__ultoa_invert+0x86>
    116c:	c9 f7       	brne	.-14     	; 0x1160 <__ultoa_invert+0x5c>
    116e:	f6 cf       	rjmp	.-20     	; 0x115c <__ultoa_invert+0x58>
    1170:	46 2f       	mov	r20, r22
    1172:	4f 70       	andi	r20, 0x0F	; 15
    1174:	40 5d       	subi	r20, 0xD0	; 208
    1176:	4a 33       	cpi	r20, 0x3A	; 58
    1178:	18 f0       	brcs	.+6      	; 0x1180 <__ultoa_invert+0x7c>
    117a:	49 5d       	subi	r20, 0xD9	; 217
    117c:	31 fd       	sbrc	r19, 1
    117e:	40 52       	subi	r20, 0x20	; 32
    1180:	41 93       	st	Z+, r20
    1182:	02 d0       	rcall	.+4      	; 0x1188 <__ultoa_invert+0x84>
    1184:	a9 f7       	brne	.-22     	; 0x1170 <__ultoa_invert+0x6c>
    1186:	ea cf       	rjmp	.-44     	; 0x115c <__ultoa_invert+0x58>
    1188:	b4 e0       	ldi	r27, 0x04	; 4
    118a:	a6 95       	lsr	r26
    118c:	97 95       	ror	r25
    118e:	87 95       	ror	r24
    1190:	77 95       	ror	r23
    1192:	67 95       	ror	r22
    1194:	ba 95       	dec	r27
    1196:	c9 f7       	brne	.-14     	; 0x118a <__ultoa_invert+0x86>
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	61 05       	cpc	r22, r1
    119c:	71 05       	cpc	r23, r1
    119e:	08 95       	ret
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	0a 2e       	mov	r0, r26
    11a6:	06 94       	lsr	r0
    11a8:	57 95       	ror	r21
    11aa:	47 95       	ror	r20
    11ac:	37 95       	ror	r19
    11ae:	27 95       	ror	r18
    11b0:	ba 95       	dec	r27
    11b2:	c9 f7       	brne	.-14     	; 0x11a6 <__ultoa_invert+0xa2>
    11b4:	62 0f       	add	r22, r18
    11b6:	73 1f       	adc	r23, r19
    11b8:	84 1f       	adc	r24, r20
    11ba:	95 1f       	adc	r25, r21
    11bc:	a0 1d       	adc	r26, r0
    11be:	08 95       	ret

000011c0 <__prologue_saves__>:
    11c0:	2f 92       	push	r2
    11c2:	3f 92       	push	r3
    11c4:	4f 92       	push	r4
    11c6:	5f 92       	push	r5
    11c8:	6f 92       	push	r6
    11ca:	7f 92       	push	r7
    11cc:	8f 92       	push	r8
    11ce:	9f 92       	push	r9
    11d0:	af 92       	push	r10
    11d2:	bf 92       	push	r11
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	ca 1b       	sub	r28, r26
    11ea:	db 0b       	sbc	r29, r27
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	09 94       	ijmp

000011f8 <__epilogue_restores__>:
    11f8:	2a 88       	ldd	r2, Y+18	; 0x12
    11fa:	39 88       	ldd	r3, Y+17	; 0x11
    11fc:	48 88       	ldd	r4, Y+16	; 0x10
    11fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1200:	6e 84       	ldd	r6, Y+14	; 0x0e
    1202:	7d 84       	ldd	r7, Y+13	; 0x0d
    1204:	8c 84       	ldd	r8, Y+12	; 0x0c
    1206:	9b 84       	ldd	r9, Y+11	; 0x0b
    1208:	aa 84       	ldd	r10, Y+10	; 0x0a
    120a:	b9 84       	ldd	r11, Y+9	; 0x09
    120c:	c8 84       	ldd	r12, Y+8	; 0x08
    120e:	df 80       	ldd	r13, Y+7	; 0x07
    1210:	ee 80       	ldd	r14, Y+6	; 0x06
    1212:	fd 80       	ldd	r15, Y+5	; 0x05
    1214:	0c 81       	ldd	r16, Y+4	; 0x04
    1216:	1b 81       	ldd	r17, Y+3	; 0x03
    1218:	aa 81       	ldd	r26, Y+2	; 0x02
    121a:	b9 81       	ldd	r27, Y+1	; 0x01
    121c:	ce 0f       	add	r28, r30
    121e:	d1 1d       	adc	r29, r1
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	ed 01       	movw	r28, r26
    122c:	08 95       	ret

0000122e <_exit>:
    122e:	f8 94       	cli

00001230 <__stop_program>:
    1230:	ff cf       	rjmp	.-2      	; 0x1230 <__stop_program>
