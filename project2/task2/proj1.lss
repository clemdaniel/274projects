
proj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00000f6c  00001000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001be  008001be  000010be  2**0
                  ALLOC
  3 .stab         000020b8  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fc2  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000413a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  0000414b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001748  00000000  00000000  0000422b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007af  00000000  00000000  00005973  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004bf  00000000  00000000  00006122  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000454  00000000  00000000  000065e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000452  00000000  00000000  00006a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000afb  00000000  00000000  00006e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  00007985  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_11>
  30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3b       	cpi	r26, 0xBE	; 190
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae eb       	ldi	r26, 0xBE	; 190
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3c       	cpi	r26, 0xC2	; 194
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 04 	call	0x8ea	; 0x8ea <main>
  9e:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <defineSongs>:
#include "cmod.h"

// Define songs to be played later
void defineSongs(void) {
  // Reset song
  byteTx(CmdSong);
  a6:	8c e8       	ldi	r24, 0x8C	; 140
  a8:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(RESET_SONG);
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(4);
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(60);
  b8:	8c e3       	ldi	r24, 0x3C	; 60
  ba:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(6);
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(72);
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(6);
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(84);
  d0:	84 e5       	ldi	r24, 0x54	; 84
  d2:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(6);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(96);
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(6);
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>

  // Start song
  byteTx(CmdSong);
  e8:	8c e8       	ldi	r24, 0x8C	; 140
  ea:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(START_SONG);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(6);
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(69);
  fa:	85 e4       	ldi	r24, 0x45	; 69
  fc:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(18);
 100:	82 e1       	ldi	r24, 0x12	; 18
 102:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(72);
 106:	88 e4       	ldi	r24, 0x48	; 72
 108:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(12);
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(74);
 112:	8a e4       	ldi	r24, 0x4A	; 74
 114:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(12);
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(72);
 11e:	88 e4       	ldi	r24, 0x48	; 72
 120:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(12);
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(69);
 12a:	85 e4       	ldi	r24, 0x45	; 69
 12c:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(12);
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(77);
 136:	8d e4       	ldi	r24, 0x4D	; 77
 138:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(24);
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	0c 94 97 01 	jmp	0x32e	; 0x32e <byteTx>

00000142 <powerOnRobot>:
}

// Ensure that the robot is On.
void powerOnRobot(void) {
  // If Create's power is off, turn it on
  if(!RobotIsOn) {
 142:	1d 99       	sbic	0x03, 5	; 3
 144:	12 c0       	rjmp	.+36     	; 0x16a <powerOnRobot+0x28>
    while(!RobotIsOn) {
 146:	1d 99       	sbic	0x03, 5	; 3
 148:	0c c0       	rjmp	.+24     	; 0x162 <powerOnRobot+0x20>
      RobotPwrToggleLow;
 14a:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
 14c:	84 ef       	ldi	r24, 0xF4	; 244
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 64 01 	call	0x2c8	; 0x2c8 <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
 154:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
 156:	84 e6       	ldi	r24, 0x64	; 100
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <delayMs>
      RobotPwrToggleLow;
 15e:	5f 98       	cbi	0x0b, 7	; 11
 160:	f2 cf       	rjmp	.-28     	; 0x146 <powerOnRobot+0x4>
    }
    delayMs(3500);  // Delay for startup
 162:	8c ea       	ldi	r24, 0xAC	; 172
 164:	9d e0       	ldi	r25, 0x0D	; 13
 166:	0e 94 64 01 	call	0x2c8	; 0x2c8 <delayMs>
  }

  // Flush the buffer
  while( (UCSR0A & 0x80) && UDR0);
 16a:	80 91 c0 00 	lds	r24, 0x00C0
 16e:	87 ff       	sbrs	r24, 7
 170:	04 c0       	rjmp	.+8      	; 0x17a <powerOnRobot+0x38>
 172:	80 91 c6 00 	lds	r24, 0x00C6
 176:	81 11       	cpse	r24, r1
 178:	f8 cf       	rjmp	.-16     	; 0x16a <powerOnRobot+0x28>
 17a:	08 95       	ret

0000017c <powerOffRobot>:
}

// Ensure that the robot is OFF.
void powerOffRobot(void) {
  // If Create's power is on, turn it off
  if(RobotIsOn) {
 17c:	1d 9b       	sbis	0x03, 5	; 3
 17e:	08 95       	ret
    while(RobotIsOn) {
 180:	1d 9b       	sbis	0x03, 5	; 3
 182:	0c c0       	rjmp	.+24     	; 0x19c <powerOffRobot+0x20>
      RobotPwrToggleLow;
 184:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
 186:	84 ef       	ldi	r24, 0xF4	; 244
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
 18e:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
 190:	84 e6       	ldi	r24, 0x64	; 100
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 64 01 	call	0x2c8	; 0x2c8 <delayMs>
      RobotPwrToggleLow;
 198:	5f 98       	cbi	0x0b, 7	; 11
 19a:	f2 cf       	rjmp	.-28     	; 0x180 <powerOffRobot+0x4>
 19c:	08 95       	ret

0000019e <__vector_14>:
volatile uint8_t  delayTimerRunning = 0;          // Definition checked against declaration


// Timer 0 interrupt 
// SIGNAL(SIG_OUTPUT_COMPARE0A)
ISR(TIMER0_COMPA_vect) {
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
  if(delayTimerCount) {
 1ac:	80 91 bf 01 	lds	r24, 0x01BF
 1b0:	90 91 c0 01 	lds	r25, 0x01C0
 1b4:	89 2b       	or	r24, r25
 1b6:	51 f0       	breq	.+20     	; 0x1cc <__vector_14+0x2e>
    delayTimerCount--;
 1b8:	80 91 bf 01 	lds	r24, 0x01BF
 1bc:	90 91 c0 01 	lds	r25, 0x01C0
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	90 93 c0 01 	sts	0x01C0, r25
 1c6:	80 93 bf 01 	sts	0x01BF, r24
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__vector_14+0x32>
  } else {
    delayTimerRunning = 0;
 1cc:	10 92 be 01 	sts	0x01BE, r1
  //     turn(-523);
  //   } else if (IR == 0x82) { //forward
  //     drive(100);
  //   }
  // }
}
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_11>:


//SIGNAL(SIG_OUTPUT_COMPARE1A)
ISR(TIMER1_COMPA_vect) {
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
  //Update and send sensor values
  //transmit("01");
  byteTx(142);
 200:	8e e8       	ldi	r24, 0x8E	; 142
 202:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(17);
 206:	81 e1       	ldi	r24, 0x11	; 17
 208:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  IR = byteRx();
 20c:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>
 210:	80 93 c1 01 	sts	0x01C1, r24
  // byteTx(139);  // leds
  // byteTx(0);    // set advance and play to OFF
  // byteTx(255);  // red
  // byteTx(255);  // full intensity 
  //readSensors();
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_12>:

ISR(TIMER1_COMPB_vect) { 
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
  //transmit("00");
  byteTx(142);
 258:	8e e8       	ldi	r24, 0x8E	; 142
 25a:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(17);
 25e:	81 e1       	ldi	r24, 0x11	; 17
 260:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  IR = byteRx();
 264:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>
 268:	80 93 c1 01 	sts	0x01C1, r24
  // byteTx(139);  // leds
  // byteTx(0);    // set advance and play to OFF
  // byteTx(0);    // green
  // byteTx(255);  // full intensity 
  //readSensors();
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <setupTimer>:

void setupTimer(void) {
  // ---------------------------------------------------
  //  Set up timer 0 to generate interrupts @ 1000Hz -- 1ms
  // ---------------------------------------------------
  TCCR0A = _BV(WGM01);              // Mode = CTC
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	84 bd       	out	0x24, r24	; 36
  TCCR0B = (_BV(CS00) | _BV(CS02)); // CS0 | CS2 = CLK/1024
 292:	95 e0       	ldi	r25, 0x05	; 5
 294:	95 bd       	out	0x25, r25	; 37
  OCR0A  = 17;                      // 18432000/(1024*1000) = 18
 296:	91 e1       	ldi	r25, 0x11	; 17
 298:	97 bd       	out	0x27, r25	; 39
  TIMSK0 = _BV(OCIE0A);             // Enable output compare A interrupt
 29a:	80 93 6e 00 	sts	0x006E, r24


  // ---------------------------------------------------
  //  Set up timer 1 to generate interrupts @ 1Hz -- 1 second
  // ---------------------------------------------------
  TCCR1A = 0x00;
 29e:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (_BV(WGM12) | _BV(CS10) | _BV(CS12));  // WGM12 | CS10 | CS12 = CTC Mode, CLK/1024
 2a2:	8d e0       	ldi	r24, 0x0D	; 13
 2a4:	80 93 81 00 	sts	0x0081, r24
  OCR1A  = 35999;                                 // 18432000/(1024*.5) = 36,000
 2a8:	8f e9       	ldi	r24, 0x9F	; 159
 2aa:	9c e8       	ldi	r25, 0x8C	; 140
 2ac:	90 93 89 00 	sts	0x0089, r25
 2b0:	80 93 88 00 	sts	0x0088, r24
  OCR1B  = 17999;                                 // 18432000/(1024*1)  = 18,000
 2b4:	8f e4       	ldi	r24, 0x4F	; 79
 2b6:	96 e4       	ldi	r25, 0x46	; 70
 2b8:	90 93 8b 00 	sts	0x008B, r25
 2bc:	80 93 8a 00 	sts	0x008A, r24
  TIMSK1 = _BV(OCIE1A) | _BV(OCIE1B);             // Enable output compare A and B interrupt
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	80 93 6f 00 	sts	0x006F, r24
 2c6:	08 95       	ret

000002c8 <delayMs>:
}

// Delay for the specified time in ms without updating sensor values
void delayMs(uint16_t time_ms)
{
  cli();
 2c8:	f8 94       	cli
  delayTimerRunning = 1;
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	20 93 be 01 	sts	0x01BE, r18
  delayTimerCount = time_ms;
 2d0:	90 93 c0 01 	sts	0x01C0, r25
 2d4:	80 93 bf 01 	sts	0x01BF, r24
  sei();
 2d8:	78 94       	sei

  while(delayTimerRunning) {
 2da:	80 91 be 01 	lds	r24, 0x01BE
 2de:	88 23       	and	r24, r24
 2e0:	11 f0       	breq	.+4      	; 0x2e6 <delayMs+0x1e>
    asm("nop");
 2e2:	00 00       	nop
 2e4:	fa cf       	rjmp	.-12     	; 0x2da <delayMs+0x12>
  }
 2e6:	08 95       	ret

000002e8 <setupIOPins>:
  sei();
}

void setupIOPins(void) {
  // Set I/O pins
  DDRB  = 0x10;
 2e8:	80 e1       	ldi	r24, 0x10	; 16
 2ea:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
 2ec:	8f ec       	ldi	r24, 0xCF	; 207
 2ee:	85 b9       	out	0x05, r24	; 5
  DDRC  = 0x00;
 2f0:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	88 b9       	out	0x08, r24	; 8
  DDRD  = 0xE6;
 2f6:	86 ee       	ldi	r24, 0xE6	; 230
 2f8:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
 2fa:	8d e7       	ldi	r24, 0x7D	; 125
 2fc:	8b b9       	out	0x0b, r24	; 11
 2fe:	08 95       	ret

00000300 <setupSerialPort>:
}

void setupSerialPort(void) {
  // Set the transmission speed to 57600 baud, which is what the Create expects,
  // unless we tell it otherwise.
  UBRR0 = 19;
 300:	83 e1       	ldi	r24, 0x13	; 19
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	90 93 c5 00 	sts	0x00C5, r25
 308:	80 93 c4 00 	sts	0x00C4, r24
  
  // Enable both transmit and receive.
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
 30c:	88 e9       	ldi	r24, 0x98	; 152
 30e:	80 93 c1 00 	sts	0x00C1, r24
    // UCSR0B = 0x18;
  
  // Set 8-bit data.
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	80 93 c2 00 	sts	0x00C2, r24
    // UCSR0C = 0x06;

  //Turn on interupts
  sei();
 318:	78 94       	sei
 31a:	08 95       	ret

0000031c <initializeCommandModule>:
#include "oi.h"
#include "timer.h"

void initializeCommandModule(void){
  // Disable interrupts. ("Clear interrupt bit")
  cli();
 31c:	f8 94       	cli

  // One-time setup operations.
  setupIOPins();
 31e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <setupIOPins>
  setupTimer();
 322:	0e 94 47 01 	call	0x28e	; 0x28e <setupTimer>
  setupSerialPort();
 326:	0e 94 80 01 	call	0x300	; 0x300 <setupSerialPort>

  // Enable interrupts. ("Set interrupt bit")
  sei();
 32a:	78 94       	sei
 32c:	08 95       	ret

0000032e <byteTx>:
//   UDR0 = value;
// }

// Transmit a byte over the serial port
void byteTx(uint8_t value) {
  while(!(UCSR0A & _BV(UDRE0))) ;
 32e:	90 91 c0 00 	lds	r25, 0x00C0
 332:	95 ff       	sbrs	r25, 5
 334:	fc cf       	rjmp	.-8      	; 0x32e <byteTx>
  UDR0 = value;
 336:	80 93 c6 00 	sts	0x00C6, r24
 33a:	08 95       	ret

0000033c <byteRx>:

uint8_t byteRx(void) {
  // Receive one byte from the robot.
  // Call setupSerialPort() first.
  // Wait for a byte to arrive in the recieve buffer.
  while(!(UCSR0A & 0x80)) ;
 33c:	80 91 c0 00 	lds	r24, 0x00C0
 340:	87 ff       	sbrs	r24, 7
 342:	fc cf       	rjmp	.-8      	; 0x33c <byteRx>
  
  // Return that byte.
  return UDR0;
 344:	80 91 c6 00 	lds	r24, 0x00C6
}
 348:	08 95       	ret

0000034a <baud>:

void baud(uint8_t baud_code) {
 34a:	cf 93       	push	r28
 34c:	c8 2f       	mov	r28, r24
  // Switch the baud rate on both Create and module
  if(baud_code <= 11)
 34e:	8c 30       	cpi	r24, 0x0C	; 12
 350:	08 f0       	brcs	.+2      	; 0x354 <baud+0xa>
 352:	53 c0       	rjmp	.+166    	; 0x3fa <baud+0xb0>
  {
    byteTx(CmdBaud);
 354:	81 e8       	ldi	r24, 0x81	; 129
 356:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
    UCSR0A |= _BV(TXC0);
 35a:	80 91 c0 00 	lds	r24, 0x00C0
 35e:	80 64       	ori	r24, 0x40	; 64
 360:	80 93 c0 00 	sts	0x00C0, r24
    byteTx(baud_code);
 364:	8c 2f       	mov	r24, r28
 366:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;
 36a:	80 91 c0 00 	lds	r24, 0x00C0
 36e:	86 ff       	sbrs	r24, 6
 370:	fc cf       	rjmp	.-8      	; 0x36a <baud+0x20>

    cli();
 372:	f8 94       	cli

    // Switch the baud rate register
    if(baud_code == Baud115200) {
 374:	cb 30       	cpi	r28, 0x0B	; 11
 376:	19 f4       	brne	.+6      	; 0x37e <baud+0x34>
      UBRR0 = Ubrr115200;
 378:	89 e0       	ldi	r24, 0x09	; 9
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	34 c0       	rjmp	.+104    	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud57600) {
 37e:	ca 30       	cpi	r28, 0x0A	; 10
 380:	19 f4       	brne	.+6      	; 0x388 <baud+0x3e>
      UBRR0 = Ubrr57600;
 382:	83 e1       	ldi	r24, 0x13	; 19
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	2f c0       	rjmp	.+94     	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud38400) {
 388:	c9 30       	cpi	r28, 0x09	; 9
 38a:	19 f4       	brne	.+6      	; 0x392 <baud+0x48>
      UBRR0 = Ubrr38400;
 38c:	8d e1       	ldi	r24, 0x1D	; 29
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	2a c0       	rjmp	.+84     	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud28800) {
 392:	c8 30       	cpi	r28, 0x08	; 8
 394:	19 f4       	brne	.+6      	; 0x39c <baud+0x52>
      UBRR0 = Ubrr28800;
 396:	87 e2       	ldi	r24, 0x27	; 39
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	25 c0       	rjmp	.+74     	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud19200) {
 39c:	c7 30       	cpi	r28, 0x07	; 7
 39e:	19 f4       	brne	.+6      	; 0x3a6 <baud+0x5c>
      UBRR0 = Ubrr19200;
 3a0:	8b e3       	ldi	r24, 0x3B	; 59
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	20 c0       	rjmp	.+64     	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud14400) {
 3a6:	c6 30       	cpi	r28, 0x06	; 6
 3a8:	19 f4       	brne	.+6      	; 0x3b0 <baud+0x66>
      UBRR0 = Ubrr14400;
 3aa:	8f e4       	ldi	r24, 0x4F	; 79
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	1b c0       	rjmp	.+54     	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud9600) {
 3b0:	c5 30       	cpi	r28, 0x05	; 5
 3b2:	19 f4       	brne	.+6      	; 0x3ba <baud+0x70>
      UBRR0 = Ubrr9600;
 3b4:	87 e7       	ldi	r24, 0x77	; 119
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	16 c0       	rjmp	.+44     	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud4800) {
 3ba:	c4 30       	cpi	r28, 0x04	; 4
 3bc:	19 f4       	brne	.+6      	; 0x3c4 <baud+0x7a>
      UBRR0 = Ubrr4800;
 3be:	8f ee       	ldi	r24, 0xEF	; 239
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud2400) {
 3c4:	c3 30       	cpi	r28, 0x03	; 3
 3c6:	19 f4       	brne	.+6      	; 0x3ce <baud+0x84>
      UBRR0 = Ubrr2400;
 3c8:	8f ed       	ldi	r24, 0xDF	; 223
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud1200) {
 3ce:	c2 30       	cpi	r28, 0x02	; 2
 3d0:	19 f4       	brne	.+6      	; 0x3d8 <baud+0x8e>
      UBRR0 = Ubrr1200;
 3d2:	8f eb       	ldi	r24, 0xBF	; 191
 3d4:	93 e0       	ldi	r25, 0x03	; 3
 3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud600) {
 3d8:	c1 30       	cpi	r28, 0x01	; 1
 3da:	19 f4       	brne	.+6      	; 0x3e2 <baud+0x98>
      UBRR0 = Ubrr600;
 3dc:	8f e7       	ldi	r24, 0x7F	; 127
 3de:	97 e0       	ldi	r25, 0x07	; 7
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <baud+0x9c>
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	9e e0       	ldi	r25, 0x0E	; 14
 3e6:	90 93 c5 00 	sts	0x00C5, r25
 3ea:	80 93 c4 00 	sts	0x00C4, r24
    }
    sei();
 3ee:	78 94       	sei

    delayMs(100);
 3f0:	84 e6       	ldi	r24, 0x64	; 100
 3f2:	90 e0       	ldi	r25, 0x00	; 0
  }
}
 3f4:	cf 91       	pop	r28
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
    }
    sei();

    delayMs(100);
 3f6:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <delayMs>
  }
}
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <drive>:
}

/**	Drive the robot at rate 'rate' until stopped
 *		rate in mm/s
 */
void drive(int rate) {
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	ec 01       	movw	r28, r24
	//} else if (rate < 0) {
		//use two compliment
		//not currently necessary
	//}

	byteTx(CmdDriveWheels);
 404:	81 e9       	ldi	r24, 0x91	; 145
 406:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
	byteTx(hi);
 40a:	8d 2f       	mov	r24, r29
 40c:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
	byteTx(lo);
 410:	8c 2f       	mov	r24, r28
 412:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
	byteTx(hi);
 416:	8d 2f       	mov	r24, r29
 418:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
	byteTx(lo);
 41c:	8c 2f       	mov	r24, r28
}
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28

	byteTx(CmdDriveWheels);
	byteTx(hi);
	byteTx(lo);
	byteTx(hi);
	byteTx(lo);
 422:	0c 94 97 01 	jmp	0x32e	; 0x32e <byteTx>

00000426 <stop>:
}

/** Stop the robot	*/
void stop(void) {
	drive(0);
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <drive>

0000042e <turn>:
/**	Turn the robot angle theta
 *		theta in radians (theta * 1000)
 *		positive angles indicate counter-clockwise turns
 *		negative angles indicate clockwise turns
 */
void turn(int theta) {
 42e:	cf 92       	push	r12
 430:	df 92       	push	r13
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	1f 92       	push	r1
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	6c 01       	movw	r12, r24
	uint8_t rHi;
	uint8_t rLo;
	uint8_t lHi;
	uint8_t lLo;

	if (theta > 0) {
 444:	18 16       	cp	r1, r24
 446:	19 06       	cpc	r1, r25
 448:	4c f0       	brlt	.+18     	; 0x45c <turn+0x2e>
	} else {
		rHi = vHiNeg;
		rLo = vLoNeg;
		lHi = vHiPos;
		lLo = vLoPos;
		theta *= -1;
 44a:	d1 94       	neg	r13
 44c:	c1 94       	neg	r12
 44e:	d1 08       	sbc	r13, r1
		lLo = vLoNeg;
	} else {
		rHi = vHiNeg;
		rLo = vLoNeg;
		lHi = vHiPos;
		lLo = vLoPos;
 450:	15 ea       	ldi	r17, 0xA5	; 165
		lHi = vHiNeg;
		lLo = vLoNeg;
	} else {
		rHi = vHiNeg;
		rLo = vLoNeg;
		lHi = vHiPos;
 452:	00 e0       	ldi	r16, 0x00	; 0
		rLo = vLoPos;
		lHi = vHiNeg;
		lLo = vLoNeg;
	} else {
		rHi = vHiNeg;
		rLo = vLoNeg;
 454:	9b e5       	ldi	r25, 0x5B	; 91
		rHi = vHiPos;
		rLo = vLoPos;
		lHi = vHiNeg;
		lLo = vLoNeg;
	} else {
		rHi = vHiNeg;
 456:	ff 24       	eor	r15, r15
 458:	fa 94       	dec	r15
 45a:	04 c0       	rjmp	.+8      	; 0x464 <turn+0x36>

	if (theta > 0) {
		rHi = vHiPos;
		rLo = vLoPos;
		lHi = vHiNeg;
		lLo = vLoNeg;
 45c:	1b e5       	ldi	r17, 0x5B	; 91
	uint8_t lLo;

	if (theta > 0) {
		rHi = vHiPos;
		rLo = vLoPos;
		lHi = vHiNeg;
 45e:	0f ef       	ldi	r16, 0xFF	; 255
	uint8_t lHi;
	uint8_t lLo;

	if (theta > 0) {
		rHi = vHiPos;
		rLo = vLoPos;
 460:	95 ea       	ldi	r25, 0xA5	; 165
	uint8_t rLo;
	uint8_t lHi;
	uint8_t lLo;

	if (theta > 0) {
		rHi = vHiPos;
 462:	f1 2c       	mov	r15, r1
		lHi = vHiPos;
		lLo = vLoPos;
		theta *= -1;
	}

	byteTx(CmdDriveWheels);
 464:	81 e9       	ldi	r24, 0x91	; 145
 466:	99 83       	std	Y+1, r25	; 0x01
 468:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
	byteTx(rHi);
 46c:	8f 2d       	mov	r24, r15
 46e:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
	byteTx(rLo);
 472:	99 81       	ldd	r25, Y+1	; 0x01
 474:	89 2f       	mov	r24, r25
 476:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
	byteTx(lHi);
 47a:	80 2f       	mov	r24, r16
 47c:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
	byteTx(lLo);
 480:	81 2f       	mov	r24, r17
 482:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>

	delayMs(theta);
 486:	c6 01       	movw	r24, r12
 488:	0e 94 64 01 	call	0x2c8	; 0x2c8 <delayMs>
	stop();
}
 48c:	0f 90       	pop	r0
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
	byteTx(rLo);
	byteTx(lHi);
	byteTx(lLo);

	delayMs(theta);
	stop();
 49c:	0c 94 13 02 	jmp	0x426	; 0x426 <stop>

000004a0 <pentagon>:
/** Make the robot drive in a pentagon shape
 *		direction only -1 or 1
 *			1 indicates counter-clockwise
 * 	  	-1 indicates clockwise
 */
void pentagon(int direction) {
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
        //drive for 8000ms = 8s, 8s * 100 mm/s = 800 mm = 80cm
				delayMs(8000); 
        stop();
				//turn at angle 3*pi/5 radians
				//(don't turn after the last leg)
        if (i != 4) turn((int)(direction*3*PI/5) * 1000);
 4a8:	29 e0       	ldi	r18, 0x09	; 9
 4aa:	ac 01       	movw	r20, r24
 4ac:	24 9f       	mul	r18, r20
 4ae:	c0 01       	movw	r24, r0
 4b0:	25 9f       	mul	r18, r21
 4b2:	90 0d       	add	r25, r0
 4b4:	11 24       	eor	r1, r1
 4b6:	65 e0       	ldi	r22, 0x05	; 5
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	0e 94 bb 04 	call	0x976	; 0x976 <__divmodhi4>
 4be:	88 ee       	ldi	r24, 0xE8	; 232
 4c0:	93 e0       	ldi	r25, 0x03	; 3
 4c2:	68 9f       	mul	r22, r24
 4c4:	80 01       	movw	r16, r0
 4c6:	69 9f       	mul	r22, r25
 4c8:	10 0d       	add	r17, r0
 4ca:	78 9f       	mul	r23, r24
 4cc:	10 0d       	add	r17, r0
 4ce:	11 24       	eor	r1, r1
 *			1 indicates counter-clockwise
 * 	  	-1 indicates clockwise
 */
void pentagon(int direction) {
	int i;
	for (i=0; i<5; i++) {
 4d0:	c0 e0       	ldi	r28, 0x00	; 0
 4d2:	d0 e0       	ldi	r29, 0x00	; 0
				//drive at 100mm/s        
				drive(100);
 4d4:	84 e6       	ldi	r24, 0x64	; 100
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <drive>
        //drive for 8000ms = 8s, 8s * 100 mm/s = 800 mm = 80cm
				delayMs(8000); 
 4dc:	80 e4       	ldi	r24, 0x40	; 64
 4de:	9f e1       	ldi	r25, 0x1F	; 31
 4e0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <delayMs>
        stop();
 4e4:	0e 94 13 02 	call	0x426	; 0x426 <stop>
				//turn at angle 3*pi/5 radians
				//(don't turn after the last leg)
        if (i != 4) turn((int)(direction*3*PI/5) * 1000);
 4e8:	c4 30       	cpi	r28, 0x04	; 4
 4ea:	d1 05       	cpc	r29, r1
 4ec:	19 f0       	breq	.+6      	; 0x4f4 <pentagon+0x54>
 4ee:	c8 01       	movw	r24, r16
 4f0:	0e 94 17 02 	call	0x42e	; 0x42e <turn>
 *			1 indicates counter-clockwise
 * 	  	-1 indicates clockwise
 */
void pentagon(int direction) {
	int i;
	for (i=0; i<5; i++) {
 4f4:	21 96       	adiw	r28, 0x01	; 1
 4f6:	c5 30       	cpi	r28, 0x05	; 5
 4f8:	d1 05       	cpc	r29, r1
 4fa:	61 f7       	brne	.-40     	; 0x4d4 <pentagon+0x34>
        stop();
				//turn at angle 3*pi/5 radians
				//(don't turn after the last leg)
        if (i != 4) turn((int)(direction*3*PI/5) * 1000);
    } 
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	08 95       	ret

00000506 <setupRightLED>:

/*
 * This function sets up the right LED.
 */
void setupRightLED(void) {
	DDRD |= (1 << 5);
 506:	55 9a       	sbi	0x0a, 5	; 10
 508:	08 95       	ret

0000050a <rightLEDon>:
}
/*
 * This function turns on the right LED.
 */
void rightLEDon(void) {
	PORTD &= ~(1 << 5);
 50a:	5d 98       	cbi	0x0b, 5	; 11
 50c:	08 95       	ret

0000050e <rightLEDoff>:
} 
/*
 * This function turns off the right LED.
 */
void rightLEDoff(void) {
	PORTD |= (1 << 5);
 50e:	5d 9a       	sbi	0x0b, 5	; 11
 510:	08 95       	ret

00000512 <setupLeftLED>:
}
/*
 * This function sets up the left LED.
 */
void setupLeftLED(void) {
	DDRD |= (1 << 6);
 512:	56 9a       	sbi	0x0a, 6	; 10
 514:	08 95       	ret

00000516 <leftLEDon>:
}
/*
 * This function turns on the left LED. 
 */
void leftLEDon(void) {
	PORTD &= ~(1 << 6);
 516:	5e 98       	cbi	0x0b, 6	; 11
 518:	08 95       	ret

0000051a <leftLEDoff>:
} 
/*
 * This function turns off the left LED.
 */
void leftLEDoff(void) {
	PORTD |= (1 << 6);
 51a:	5e 9a       	sbi	0x0b, 6	; 11
 51c:	08 95       	ret

0000051e <changePowerLightRed>:
}
/*
 * This function changes the power light to red. 
 */
void changePowerLightRed(void) {
	byteTx(CmdLeds);
 51e:	8b e8       	ldi	r24, 0x8B	; 139
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(0x00);
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(255);
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(255);
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0c 94 97 01 	jmp	0x32e	; 0x32e <byteTx>

0000053e <transmit>:
	char batteryCapacityArray[24];
	sprintf(batteryCapacityArray, "Battery Capacity: %i", (int)batteryCapacity);
	transmit(batteryCapacityArray);
}

int transmit(char* string) {
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	8c 01       	movw	r16, r24
    int i;
    int length = strlen(string);
 54c:	ec 01       	movw	r28, r24
 54e:	09 90       	ld	r0, Y+
 550:	00 20       	and	r0, r0
 552:	e9 f7       	brne	.-6      	; 0x54e <transmit+0x10>
 554:	21 97       	sbiw	r28, 0x01	; 1
 556:	c8 1b       	sub	r28, r24
 558:	d9 0b       	sbc	r29, r25
    
    for (i=0; i<length; i++) {
 55a:	7c 01       	movw	r14, r24
 55c:	c7 01       	movw	r24, r14
 55e:	80 1b       	sub	r24, r16
 560:	91 0b       	sbc	r25, r17
 562:	8c 17       	cp	r24, r28
 564:	9d 07       	cpc	r25, r29
 566:	34 f4       	brge	.+12     	; 0x574 <transmit+0x36>
        byteTx(string[i]);
 568:	f7 01       	movw	r30, r14
 56a:	81 91       	ld	r24, Z+
 56c:	7f 01       	movw	r14, r30
 56e:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
 572:	f4 cf       	rjmp	.-24     	; 0x55c <transmit+0x1e>
    }

    return length;
}
 574:	ce 01       	movw	r24, r28
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	08 95       	ret

00000584 <readWallSignal>:
	readWallSignal();
	readCliffSensors();
	readGroupPacket3();
} 

void readWallSignal(void) {
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	2b 97       	sbiw	r28, 0x0b	; 11
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	f8 94       	cli
 596:	de bf       	out	0x3e, r29	; 62
 598:	0f be       	out	0x3f, r0	; 63
 59a:	cd bf       	out	0x3d, r28	; 61
		
		uint16_t wall;
		uint8_t hi, lo;
		byteTx(142);
 59c:	8e e8       	ldi	r24, 0x8E	; 142
 59e:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
		byteTx(WallPID);
 5a2:	8b e1       	ldi	r24, 0x1B	; 27
 5a4:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
		hi = byteRx();
 5a8:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>
 5ac:	18 2f       	mov	r17, r24
		lo = byteRx();
 5ae:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 5b2:	21 2f       	mov	r18, r17
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	32 2f       	mov	r19, r18
 5b8:	22 27       	eor	r18, r18
	total = total | lo;
 5ba:	28 2b       	or	r18, r24
		byteTx(WallPID);
		hi = byteRx();
		lo = byteRx();
		wall = twoUBytesIntoInt(hi, lo);
		char wallArray[11];
		sprintf(wallArray, "Wall: %i", (int)wall);
 5bc:	3f 93       	push	r19
 5be:	2f 93       	push	r18
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	9f 93       	push	r25
 5c6:	8f 93       	push	r24
 5c8:	8e 01       	movw	r16, r28
 5ca:	0f 5f       	subi	r16, 0xFF	; 255
 5cc:	1f 4f       	sbci	r17, 0xFF	; 255
 5ce:	1f 93       	push	r17
 5d0:	0f 93       	push	r16
 5d2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
		transmit(wallArray);
 5d6:	c8 01       	movw	r24, r16
 5d8:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0

}
 5e8:	2b 96       	adiw	r28, 0x0b	; 11
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	f8 94       	cli
 5ee:	de bf       	out	0x3e, r29	; 62
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	cd bf       	out	0x3d, r28	; 61
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	08 95       	ret

000005fe <readCliffSensors>:

void readCliffSensors(void) {
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	c2 55       	subi	r28, 0x52	; 82
 60c:	d1 09       	sbc	r29, r1
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	de bf       	out	0x3e, r29	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	cd bf       	out	0x3d, r28	; 61
	
		uint16_t cliffLeft, cliffFrontLeft, cliffFrontRight, cliffRight;
		uint8_t hi, lo;
		byteTx(142);
 618:	8e e8       	ldi	r24, 0x8E	; 142
 61a:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
		byteTx(CliffLeftPID);
 61e:	8c e1       	ldi	r24, 0x1C	; 28
 620:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
		hi = byteRx();
 624:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>
 628:	18 2f       	mov	r17, r24
		lo = byteRx();
 62a:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 62e:	21 2f       	mov	r18, r17
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	32 2f       	mov	r19, r18
 634:	22 27       	eor	r18, r18
	total = total | lo;
 636:	28 2b       	or	r18, r24
		byteTx(CliffLeftPID);
		hi = byteRx();
		lo = byteRx();
		cliffLeft = twoUBytesIntoInt(hi, lo);
		char cliffLeftArray[17];
		sprintf(cliffLeftArray, "Cliff Left: %i", (int)cliffLeft);
 638:	3f 93       	push	r19
 63a:	2f 93       	push	r18
 63c:	89 e0       	ldi	r24, 0x09	; 9
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	9f 93       	push	r25
 642:	8f 93       	push	r24
 644:	8e 01       	movw	r16, r28
 646:	0e 5b       	subi	r16, 0xBE	; 190
 648:	1f 4f       	sbci	r17, 0xFF	; 255
 64a:	1f 93       	push	r17
 64c:	0f 93       	push	r16
 64e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
		transmit(cliffLeftArray);
 652:	c8 01       	movw	r24, r16
 654:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>

		byteTx(142);
 658:	8e e8       	ldi	r24, 0x8E	; 142
 65a:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
		byteTx(CliffFrontLeftPID);
 65e:	8d e1       	ldi	r24, 0x1D	; 29
 660:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
		hi = byteRx();
 664:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>
 668:	18 2f       	mov	r17, r24
		lo = byteRx();
 66a:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 66e:	21 2f       	mov	r18, r17
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	32 2f       	mov	r19, r18
 674:	22 27       	eor	r18, r18
	total = total | lo;
 676:	28 2b       	or	r18, r24
		byteTx(CliffFrontLeftPID);
		hi = byteRx();
		lo = byteRx();
		cliffFrontLeft = twoUBytesIntoInt(hi, lo);
		char cliffFrontLeftArray[23];
		sprintf(cliffFrontLeftArray, "Cliff Front Left: %i", (int)cliffFrontLeft);
 678:	3f 93       	push	r19
 67a:	2f 93       	push	r18
 67c:	88 e1       	ldi	r24, 0x18	; 24
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	9f 93       	push	r25
 682:	8f 93       	push	r24
 684:	8e 01       	movw	r16, r28
 686:	07 5e       	subi	r16, 0xE7	; 231
 688:	1f 4f       	sbci	r17, 0xFF	; 255
 68a:	1f 93       	push	r17
 68c:	0f 93       	push	r16
 68e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
		transmit(cliffFrontLeftArray);
 692:	c8 01       	movw	r24, r16
 694:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>

		byteTx(142);
 698:	8e e8       	ldi	r24, 0x8E	; 142
 69a:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
		byteTx(CliffFrontRightPID);
 69e:	8e e1       	ldi	r24, 0x1E	; 30
 6a0:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
		hi = byteRx();
 6a4:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>
 6a8:	18 2f       	mov	r17, r24
		lo = byteRx();
 6aa:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 6ae:	21 2f       	mov	r18, r17
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	32 2f       	mov	r19, r18
 6b4:	22 27       	eor	r18, r18
	total = total | lo;
 6b6:	28 2b       	or	r18, r24
		byteTx(CliffFrontRightPID);
		hi = byteRx();
		lo = byteRx();
		cliffFrontRight = twoUBytesIntoInt(hi, lo);
		char cliffFrontRightArray[24];
		sprintf(cliffFrontRightArray, "Cliff Front Right: %i", (int)cliffFrontRight);
 6b8:	3f 93       	push	r19
 6ba:	2f 93       	push	r18
 6bc:	8d e2       	ldi	r24, 0x2D	; 45
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	9f 93       	push	r25
 6c2:	8f 93       	push	r24
 6c4:	8e 01       	movw	r16, r28
 6c6:	0f 5f       	subi	r16, 0xFF	; 255
 6c8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ca:	1f 93       	push	r17
 6cc:	0f 93       	push	r16
 6ce:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
		transmit(cliffFrontRightArray);
 6d2:	c8 01       	movw	r24, r16
 6d4:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>

		byteTx(142);
 6d8:	8e e8       	ldi	r24, 0x8E	; 142
 6da:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
		byteTx(CliffRightPID);
 6de:	8f e1       	ldi	r24, 0x1F	; 31
 6e0:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
		hi = byteRx();
 6e4:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>
 6e8:	18 2f       	mov	r17, r24
		lo = byteRx();
 6ea:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 6ee:	21 2f       	mov	r18, r17
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	32 2f       	mov	r19, r18
 6f4:	22 27       	eor	r18, r18
	total = total | lo;
 6f6:	28 2b       	or	r18, r24
		byteTx(CliffRightPID);
		hi = byteRx();
		lo = byteRx();
		cliffRight = twoUBytesIntoInt(hi, lo);
		char cliffRightArray[18];
		sprintf(cliffRightArray, "Cliff Right: %i", (int)cliffRight);
 6f8:	3f 93       	push	r19
 6fa:	2f 93       	push	r18
 6fc:	83 e4       	ldi	r24, 0x43	; 67
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	9f 93       	push	r25
 702:	8f 93       	push	r24
 704:	8e 01       	movw	r16, r28
 706:	00 5d       	subi	r16, 0xD0	; 208
 708:	1f 4f       	sbci	r17, 0xFF	; 255
 70a:	1f 93       	push	r17
 70c:	0f 93       	push	r16
 70e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
		transmit(cliffRightArray);
 712:	c8 01       	movw	r24, r16
 714:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	f8 94       	cli
 71c:	de bf       	out	0x3e, r29	; 62
 71e:	0f be       	out	0x3f, r0	; 63
 720:	cd bf       	out	0x3d, r28	; 61

}
 722:	ce 5a       	subi	r28, 0xAE	; 174
 724:	df 4f       	sbci	r29, 0xFF	; 255
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	f8 94       	cli
 72a:	de bf       	out	0x3e, r29	; 62
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	1f 91       	pop	r17
 736:	0f 91       	pop	r16
 738:	08 95       	ret

0000073a <readGroupPacket3>:

void readGroupPacket3(void) {
 73a:	cf 92       	push	r12
 73c:	df 92       	push	r13
 73e:	ef 92       	push	r14
 740:	ff 92       	push	r15
 742:	0f 93       	push	r16
 744:	1f 93       	push	r17
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	c2 58       	subi	r28, 0x82	; 130
 750:	d1 09       	sbc	r29, r1
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	de bf       	out	0x3e, r29	; 62
 758:	0f be       	out	0x3f, r0	; 63
 75a:	cd bf       	out	0x3d, r28	; 61
	//read group packet 3
	uint8_t i;
	uint8_t group3Data[10];  /* array for group packet ID 3 data */
	while(UCSR0A & 0x80) /* clear the receive buffer */
 75c:	80 91 c0 00 	lds	r24, 0x00C0
 760:	87 ff       	sbrs	r24, 7
 762:	03 c0       	rjmp	.+6      	; 0x76a <readGroupPacket3+0x30>
	  i = UDR0;
 764:	80 91 c6 00 	lds	r24, 0x00C6
 768:	f9 cf       	rjmp	.-14     	; 0x75c <readGroupPacket3+0x22>
	byteTx(142);  /* sensor opcode */
 76a:	8e e8       	ldi	r24, 0x8E	; 142
 76c:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
	byteTx(3);   /* send request for packet 3 */
 770:	83 e0       	ldi	r24, 0x03	; 3
 772:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
 776:	7e 01       	movw	r14, r28
 778:	89 e7       	ldi	r24, 0x79	; 121
 77a:	e8 0e       	add	r14, r24
 77c:	f1 1c       	adc	r15, r1
 77e:	67 01       	movw	r12, r14
 780:	9a e0       	ldi	r25, 0x0A	; 10
 782:	c9 0e       	add	r12, r25
 784:	d1 1c       	adc	r13, r1
 786:	87 01       	movw	r16, r14
	for(i = 0; i < 10; i++) //10 is size of group
	{
	  group3Data[i] = byteRx();  /* read each sensor byte */
 788:	0e 94 9e 01 	call	0x33c	; 0x33c <byteRx>
 78c:	f7 01       	movw	r30, r14
 78e:	81 93       	st	Z+, r24
 790:	7f 01       	movw	r14, r30
	uint8_t group3Data[10];  /* array for group packet ID 3 data */
	while(UCSR0A & 0x80) /* clear the receive buffer */
	  i = UDR0;
	byteTx(142);  /* sensor opcode */
	byteTx(3);   /* send request for packet 3 */
	for(i = 0; i < 10; i++) //10 is size of group
 792:	ec 15       	cp	r30, r12
 794:	fd 05       	cpc	r31, r13
 796:	c1 f7       	brne	.-16     	; 0x788 <readGroupPacket3+0x4e>
	  group3Data[i] = byteRx();  /* read each sensor byte */
	}

	//charging state - max length == 17
	char chargingState[17];
	sprintf(chargingState, "Charging State: %i", (int)group3Data[0]);
 798:	f8 01       	movw	r30, r16
 79a:	80 81       	ld	r24, Z
 79c:	1f 92       	push	r1
 79e:	8f 93       	push	r24
 7a0:	83 e5       	ldi	r24, 0x53	; 83
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	9f 93       	push	r25
 7a6:	8f 93       	push	r24
 7a8:	7e 01       	movw	r14, r28
 7aa:	f9 e4       	ldi	r31, 0x49	; 73
 7ac:	ef 0e       	add	r14, r31
 7ae:	f1 1c       	adc	r15, r1
 7b0:	ff 92       	push	r15
 7b2:	ef 92       	push	r14
 7b4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
	transmit(chargingState);
 7b8:	c7 01       	movw	r24, r14
 7ba:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 7be:	f8 01       	movw	r30, r16
 7c0:	81 81       	ldd	r24, Z+1	; 0x01
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	98 2f       	mov	r25, r24
 7c6:	88 27       	eor	r24, r24
	total = total | lo;
 7c8:	22 81       	ldd	r18, Z+2	; 0x02
 7ca:	82 2b       	or	r24, r18
	transmit(chargingState);

	//voltage - max length == 17
	uint16_t voltage = twoUBytesIntoInt(group3Data[1], group3Data[2]);
	char voltageArray[15];
	sprintf(voltageArray, "Voltage: %i", (int)voltage);
 7cc:	9f 93       	push	r25
 7ce:	8f 93       	push	r24
 7d0:	86 e6       	ldi	r24, 0x66	; 102
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	9f 93       	push	r25
 7d6:	8f 93       	push	r24
 7d8:	7e 01       	movw	r14, r28
 7da:	fa e6       	ldi	r31, 0x6A	; 106
 7dc:	ef 0e       	add	r14, r31
 7de:	f1 1c       	adc	r15, r1
 7e0:	ff 92       	push	r15
 7e2:	ef 92       	push	r14
 7e4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
	transmit(voltageArray);
 7e8:	c7 01       	movw	r24, r14
 7ea:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>
	return total; 

}

int16_t twoBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 7ee:	f8 01       	movw	r30, r16
 7f0:	83 81       	ldd	r24, Z+3	; 0x03
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	98 2f       	mov	r25, r24
 7f6:	88 27       	eor	r24, r24
	total = total | lo;
 7f8:	24 81       	ldd	r18, Z+4	; 0x04
 7fa:	82 2b       	or	r24, r18
	transmit(voltageArray);

	//signed int
	int16_t current = twoBytesIntoInt(group3Data[3], group3Data[4]);
	char currentArray[16];
	sprintf(currentArray, "Current: %i", (int)current);
 7fc:	9f 93       	push	r25
 7fe:	8f 93       	push	r24
 800:	82 e7       	ldi	r24, 0x72	; 114
 802:	91 e0       	ldi	r25, 0x01	; 1
 804:	9f 93       	push	r25
 806:	8f 93       	push	r24
 808:	7e 01       	movw	r14, r28
 80a:	fa e5       	ldi	r31, 0x5A	; 90
 80c:	ef 0e       	add	r14, r31
 80e:	f1 1c       	adc	r15, r1
 810:	ff 92       	push	r15
 812:	ef 92       	push	r14
 814:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
	transmit(currentArray);
 818:	c7 01       	movw	r24, r14
 81a:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>

	//signed int
	int16_t battTemp = group3Data[5];
 81e:	f8 01       	movw	r30, r16
 820:	85 81       	ldd	r24, Z+5	; 0x05
	char battTempArray[26];
	sprintf(battTempArray, "Battery Temperature: %i", (int)battTemp);
 822:	1f 92       	push	r1
 824:	8f 93       	push	r24
 826:	8e e7       	ldi	r24, 0x7E	; 126
 828:	91 e0       	ldi	r25, 0x01	; 1
 82a:	9f 93       	push	r25
 82c:	8f 93       	push	r24
 82e:	ce 01       	movw	r24, r28
 830:	01 96       	adiw	r24, 0x01	; 1
 832:	7c 01       	movw	r14, r24
 834:	ff 92       	push	r15
 836:	8f 93       	push	r24
 838:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
	transmit(battTempArray);
 83c:	c7 01       	movw	r24, r14
 83e:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 842:	f8 01       	movw	r30, r16
 844:	86 81       	ldd	r24, Z+6	; 0x06
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	98 2f       	mov	r25, r24
 84a:	88 27       	eor	r24, r24
	total = total | lo;
 84c:	27 81       	ldd	r18, Z+7	; 0x07
 84e:	82 2b       	or	r24, r18
	sprintf(battTempArray, "Battery Temperature: %i", (int)battTemp);
	transmit(battTempArray);

	uint16_t batteryCharge = twoUBytesIntoInt(group3Data[6], group3Data[7]);
	char batteryChargeArray[22];
	sprintf(batteryChargeArray, "Battery Charge: %i", (int)batteryCharge);
 850:	9f 93       	push	r25
 852:	8f 93       	push	r24
 854:	86 e9       	ldi	r24, 0x96	; 150
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	9f 93       	push	r25
 85a:	8f 93       	push	r24
 85c:	7e 01       	movw	r14, r28
 85e:	f3 e3       	ldi	r31, 0x33	; 51
 860:	ef 0e       	add	r14, r31
 862:	f1 1c       	adc	r15, r1
 864:	ff 92       	push	r15
 866:	ef 92       	push	r14
 868:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
	transmit(batteryChargeArray);
 86c:	c7 01       	movw	r24, r14
 86e:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 872:	f8 01       	movw	r30, r16
 874:	80 85       	ldd	r24, Z+8	; 0x08
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	98 2f       	mov	r25, r24
 87a:	88 27       	eor	r24, r24
	total = total | lo;
 87c:	21 85       	ldd	r18, Z+9	; 0x09
 87e:	82 2b       	or	r24, r18
	sprintf(batteryChargeArray, "Battery Charge: %i", (int)batteryCharge);
	transmit(batteryChargeArray);

	uint16_t batteryCapacity = twoUBytesIntoInt(group3Data[8], group3Data[9]);
	char batteryCapacityArray[24];
	sprintf(batteryCapacityArray, "Battery Capacity: %i", (int)batteryCapacity);
 880:	9f 93       	push	r25
 882:	8f 93       	push	r24
 884:	89 ea       	ldi	r24, 0xA9	; 169
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	9f 93       	push	r25
 88a:	8f 93       	push	r24
 88c:	8e 01       	movw	r16, r28
 88e:	05 5e       	subi	r16, 0xE5	; 229
 890:	1f 4f       	sbci	r17, 0xFF	; 255
 892:	1f 93       	push	r17
 894:	0f 93       	push	r16
 896:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <sprintf>
	transmit(batteryCapacityArray);
 89a:	0f b6       	in	r0, 0x3f	; 63
 89c:	f8 94       	cli
 89e:	de bf       	out	0x3e, r29	; 62
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	cd bf       	out	0x3d, r28	; 61
 8a4:	c8 01       	movw	r24, r16
 8a6:	0e 94 9f 02 	call	0x53e	; 0x53e <transmit>
}
 8aa:	ce 57       	subi	r28, 0x7E	; 126
 8ac:	df 4f       	sbci	r29, 0xFF	; 255
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	f8 94       	cli
 8b2:	de bf       	out	0x3e, r29	; 62
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	cd bf       	out	0x3d, r28	; 61
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	1f 91       	pop	r17
 8be:	0f 91       	pop	r16
 8c0:	ff 90       	pop	r15
 8c2:	ef 90       	pop	r14
 8c4:	df 90       	pop	r13
 8c6:	cf 90       	pop	r12
 8c8:	08 95       	ret

000008ca <readSensors>:
#include "sensors.h"

void readSensors(void) {

	readWallSignal();
 8ca:	0e 94 c2 02 	call	0x584	; 0x584 <readWallSignal>
	readCliffSensors();
 8ce:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readCliffSensors>
	readGroupPacket3();
 8d2:	0c 94 9d 03 	jmp	0x73a	; 0x73a <readGroupPacket3>

000008d6 <twoUBytesIntoInt>:

    return length;
}

uint16_t twoUBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 8d6:	70 e0       	ldi	r23, 0x00	; 0
	total = total | lo;
	return total; 

}
 8d8:	9b 01       	movw	r18, r22
 8da:	38 2b       	or	r19, r24
 8dc:	c9 01       	movw	r24, r18
 8de:	08 95       	ret

000008e0 <twoBytesIntoInt>:

int16_t twoBytesIntoInt(uint8_t hi, uint8_t lo) {
	uint16_t total = (hi << 8);
 8e0:	70 e0       	ldi	r23, 0x00	; 0
	total = total | lo;
	return total; 
 8e2:	9b 01       	movw	r18, r22
 8e4:	38 2b       	or	r19, r24
 8e6:	c9 01       	movw	r24, r18
 8e8:	08 95       	ret

000008ea <main>:
#include "sensors.h"

// Declare Global variables 
int main() {
  // Set up Create and module
  initializeCommandModule();
 8ea:	0e 94 8e 01 	call	0x31c	; 0x31c <initializeCommandModule>
    
  powerOnRobot();
 8ee:	0e 94 a1 00 	call	0x142	; 0x142 <powerOnRobot>
    // Is the Robot on
  byteTx(CmdStart);
 8f2:	80 e8       	ldi	r24, 0x80	; 128
 8f4:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
    // Start the create
  baud(Baud57600);
 8f8:	8a e0       	ldi	r24, 0x0A	; 10
 8fa:	0e 94 a5 01 	call	0x34a	; 0x34a <baud>
    // Set the baud rate for the Create and Command Module
  defineSongs();
 8fe:	0e 94 53 00 	call	0xa6	; 0xa6 <defineSongs>
    // Define some songs so that we know the robot is on.
  byteTx(CmdControl);
 902:	82 e8       	ldi	r24, 0x82	; 130
 904:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
    // Deprecated form of safe mode. I use it because it will
    // turn of all LEDs, so it's essentially a reset.
  byteTx(CmdFull);
 908:	84 e8       	ldi	r24, 0x84	; 132
 90a:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
    // We are operating in FULL mode.

  // CSCE 274 students: I would make sure the robot stops. 
  //                    As a precaution for the robot and your grade.
  stop();
 90e:	0e 94 13 02 	call	0x426	; 0x426 <stop>

  // Play the reset song and wait while it plays.
  byteTx(CmdPlay);
 912:	8d e8       	ldi	r24, 0x8D	; 141
 914:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  byteTx(RESET_SONG);
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
  delayMs(750);
 91e:	8e ee       	ldi	r24, 0xEE	; 238
 920:	92 e0       	ldi	r25, 0x02	; 2
 922:	0e 94 64 01 	call	0x2c8	; 0x2c8 <delayMs>

  //Turn power button on
  changePowerLightRed();
 926:	0e 94 8f 02 	call	0x51e	; 0x51e <changePowerLightRed>
  //LED1On;


  // Infinite operation loop
  for(;;) {
    if (IR == 0xFF) {
 92a:	80 91 c1 01 	lds	r24, 0x01C1
 92e:	8f 3f       	cpi	r24, 0xFF	; 255
 930:	19 f4       	brne	.+6      	; 0x938 <main+0x4e>
      stop();
 932:	0e 94 13 02 	call	0x426	; 0x426 <stop>
 936:	17 c0       	rjmp	.+46     	; 0x966 <main+0x7c>
    } else {
      byteTx(RESET_SONG);
 938:	80 e0       	ldi	r24, 0x00	; 0
 93a:	0e 94 97 01 	call	0x32e	; 0x32e <byteTx>
      if (IR == 0x81) { //left
 93e:	80 91 c1 01 	lds	r24, 0x01C1
 942:	81 38       	cpi	r24, 0x81	; 129
 944:	19 f4       	brne	.+6      	; 0x94c <main+0x62>
        turn(523); //pi/6 * 1000
 946:	8b e0       	ldi	r24, 0x0B	; 11
 948:	92 e0       	ldi	r25, 0x02	; 2
 94a:	04 c0       	rjmp	.+8      	; 0x954 <main+0x6a>
      } else if (IR == 0x83) { //right
 94c:	83 38       	cpi	r24, 0x83	; 131
 94e:	29 f4       	brne	.+10     	; 0x95a <main+0x70>
        turn(-523);
 950:	85 ef       	ldi	r24, 0xF5	; 245
 952:	9d ef       	ldi	r25, 0xFD	; 253
 954:	0e 94 17 02 	call	0x42e	; 0x42e <turn>
 958:	06 c0       	rjmp	.+12     	; 0x966 <main+0x7c>
      } else if (IR == 0x82) { //forward
 95a:	82 38       	cpi	r24, 0x82	; 130
 95c:	21 f4       	brne	.+8      	; 0x966 <main+0x7c>
        drive(100);
 95e:	84 e6       	ldi	r24, 0x64	; 100
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 94 ff 01 	call	0x3fe	; 0x3fe <drive>
      }
    }
    if(UserButtonPressed) {
 966:	4c 99       	sbic	0x09, 4	; 9
 968:	e0 cf       	rjmp	.-64     	; 0x92a <main+0x40>
      powerOffRobot();
 96a:	0e 94 be 00 	call	0x17c	; 0x17c <powerOffRobot>
      exit(1);
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 94 b4 07 	call	0xf68	; 0xf68 <_exit>

00000976 <__divmodhi4>:
 976:	97 fb       	bst	r25, 7
 978:	07 2e       	mov	r0, r23
 97a:	16 f4       	brtc	.+4      	; 0x980 <__divmodhi4+0xa>
 97c:	00 94       	com	r0
 97e:	07 d0       	rcall	.+14     	; 0x98e <__divmodhi4_neg1>
 980:	77 fd       	sbrc	r23, 7
 982:	09 d0       	rcall	.+18     	; 0x996 <__divmodhi4_neg2>
 984:	0e 94 cf 04 	call	0x99e	; 0x99e <__udivmodhi4>
 988:	07 fc       	sbrc	r0, 7
 98a:	05 d0       	rcall	.+10     	; 0x996 <__divmodhi4_neg2>
 98c:	3e f4       	brtc	.+14     	; 0x99c <__divmodhi4_exit>

0000098e <__divmodhi4_neg1>:
 98e:	90 95       	com	r25
 990:	81 95       	neg	r24
 992:	9f 4f       	sbci	r25, 0xFF	; 255
 994:	08 95       	ret

00000996 <__divmodhi4_neg2>:
 996:	70 95       	com	r23
 998:	61 95       	neg	r22
 99a:	7f 4f       	sbci	r23, 0xFF	; 255

0000099c <__divmodhi4_exit>:
 99c:	08 95       	ret

0000099e <__udivmodhi4>:
 99e:	aa 1b       	sub	r26, r26
 9a0:	bb 1b       	sub	r27, r27
 9a2:	51 e1       	ldi	r21, 0x11	; 17
 9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <__udivmodhi4_ep>

000009a6 <__udivmodhi4_loop>:
 9a6:	aa 1f       	adc	r26, r26
 9a8:	bb 1f       	adc	r27, r27
 9aa:	a6 17       	cp	r26, r22
 9ac:	b7 07       	cpc	r27, r23
 9ae:	10 f0       	brcs	.+4      	; 0x9b4 <__udivmodhi4_ep>
 9b0:	a6 1b       	sub	r26, r22
 9b2:	b7 0b       	sbc	r27, r23

000009b4 <__udivmodhi4_ep>:
 9b4:	88 1f       	adc	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	5a 95       	dec	r21
 9ba:	a9 f7       	brne	.-22     	; 0x9a6 <__udivmodhi4_loop>
 9bc:	80 95       	com	r24
 9be:	90 95       	com	r25
 9c0:	bc 01       	movw	r22, r24
 9c2:	cd 01       	movw	r24, r26
 9c4:	08 95       	ret

000009c6 <sprintf>:
 9c6:	ae e0       	ldi	r26, 0x0E	; 14
 9c8:	b0 e0       	ldi	r27, 0x00	; 0
 9ca:	e9 ee       	ldi	r30, 0xE9	; 233
 9cc:	f4 e0       	ldi	r31, 0x04	; 4
 9ce:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__prologue_saves__+0x1c>
 9d2:	0d 89       	ldd	r16, Y+21	; 0x15
 9d4:	1e 89       	ldd	r17, Y+22	; 0x16
 9d6:	86 e0       	ldi	r24, 0x06	; 6
 9d8:	8c 83       	std	Y+4, r24	; 0x04
 9da:	1a 83       	std	Y+2, r17	; 0x02
 9dc:	09 83       	std	Y+1, r16	; 0x01
 9de:	8f ef       	ldi	r24, 0xFF	; 255
 9e0:	9f e7       	ldi	r25, 0x7F	; 127
 9e2:	9e 83       	std	Y+6, r25	; 0x06
 9e4:	8d 83       	std	Y+5, r24	; 0x05
 9e6:	ae 01       	movw	r20, r28
 9e8:	47 5e       	subi	r20, 0xE7	; 231
 9ea:	5f 4f       	sbci	r21, 0xFF	; 255
 9ec:	6f 89       	ldd	r22, Y+23	; 0x17
 9ee:	78 8d       	ldd	r23, Y+24	; 0x18
 9f0:	ce 01       	movw	r24, r28
 9f2:	01 96       	adiw	r24, 0x01	; 1
 9f4:	0e 94 05 05 	call	0xa0a	; 0xa0a <vfprintf>
 9f8:	ef 81       	ldd	r30, Y+7	; 0x07
 9fa:	f8 85       	ldd	r31, Y+8	; 0x08
 9fc:	e0 0f       	add	r30, r16
 9fe:	f1 1f       	adc	r31, r17
 a00:	10 82       	st	Z, r1
 a02:	2e 96       	adiw	r28, 0x0e	; 14
 a04:	e4 e0       	ldi	r30, 0x04	; 4
 a06:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__epilogue_restores__+0x1c>

00000a0a <vfprintf>:
 a0a:	ac e0       	ldi	r26, 0x0C	; 12
 a0c:	b0 e0       	ldi	r27, 0x00	; 0
 a0e:	eb e0       	ldi	r30, 0x0B	; 11
 a10:	f5 e0       	ldi	r31, 0x05	; 5
 a12:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__prologue_saves__>
 a16:	7c 01       	movw	r14, r24
 a18:	6b 01       	movw	r12, r22
 a1a:	8a 01       	movw	r16, r20
 a1c:	fc 01       	movw	r30, r24
 a1e:	17 82       	std	Z+7, r1	; 0x07
 a20:	16 82       	std	Z+6, r1	; 0x06
 a22:	83 81       	ldd	r24, Z+3	; 0x03
 a24:	81 ff       	sbrs	r24, 1
 a26:	bd c1       	rjmp	.+890    	; 0xda2 <vfprintf+0x398>
 a28:	ce 01       	movw	r24, r28
 a2a:	01 96       	adiw	r24, 0x01	; 1
 a2c:	4c 01       	movw	r8, r24
 a2e:	f7 01       	movw	r30, r14
 a30:	93 81       	ldd	r25, Z+3	; 0x03
 a32:	f6 01       	movw	r30, r12
 a34:	93 fd       	sbrc	r25, 3
 a36:	85 91       	lpm	r24, Z+
 a38:	93 ff       	sbrs	r25, 3
 a3a:	81 91       	ld	r24, Z+
 a3c:	6f 01       	movw	r12, r30
 a3e:	88 23       	and	r24, r24
 a40:	09 f4       	brne	.+2      	; 0xa44 <vfprintf+0x3a>
 a42:	ab c1       	rjmp	.+854    	; 0xd9a <vfprintf+0x390>
 a44:	85 32       	cpi	r24, 0x25	; 37
 a46:	39 f4       	brne	.+14     	; 0xa56 <vfprintf+0x4c>
 a48:	93 fd       	sbrc	r25, 3
 a4a:	85 91       	lpm	r24, Z+
 a4c:	93 ff       	sbrs	r25, 3
 a4e:	81 91       	ld	r24, Z+
 a50:	6f 01       	movw	r12, r30
 a52:	85 32       	cpi	r24, 0x25	; 37
 a54:	29 f4       	brne	.+10     	; 0xa60 <vfprintf+0x56>
 a56:	b7 01       	movw	r22, r14
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 a5e:	e7 cf       	rjmp	.-50     	; 0xa2e <vfprintf+0x24>
 a60:	51 2c       	mov	r5, r1
 a62:	31 2c       	mov	r3, r1
 a64:	20 e0       	ldi	r18, 0x00	; 0
 a66:	20 32       	cpi	r18, 0x20	; 32
 a68:	a0 f4       	brcc	.+40     	; 0xa92 <vfprintf+0x88>
 a6a:	8b 32       	cpi	r24, 0x2B	; 43
 a6c:	69 f0       	breq	.+26     	; 0xa88 <vfprintf+0x7e>
 a6e:	30 f4       	brcc	.+12     	; 0xa7c <vfprintf+0x72>
 a70:	80 32       	cpi	r24, 0x20	; 32
 a72:	59 f0       	breq	.+22     	; 0xa8a <vfprintf+0x80>
 a74:	83 32       	cpi	r24, 0x23	; 35
 a76:	69 f4       	brne	.+26     	; 0xa92 <vfprintf+0x88>
 a78:	20 61       	ori	r18, 0x10	; 16
 a7a:	2c c0       	rjmp	.+88     	; 0xad4 <vfprintf+0xca>
 a7c:	8d 32       	cpi	r24, 0x2D	; 45
 a7e:	39 f0       	breq	.+14     	; 0xa8e <vfprintf+0x84>
 a80:	80 33       	cpi	r24, 0x30	; 48
 a82:	39 f4       	brne	.+14     	; 0xa92 <vfprintf+0x88>
 a84:	21 60       	ori	r18, 0x01	; 1
 a86:	26 c0       	rjmp	.+76     	; 0xad4 <vfprintf+0xca>
 a88:	22 60       	ori	r18, 0x02	; 2
 a8a:	24 60       	ori	r18, 0x04	; 4
 a8c:	23 c0       	rjmp	.+70     	; 0xad4 <vfprintf+0xca>
 a8e:	28 60       	ori	r18, 0x08	; 8
 a90:	21 c0       	rjmp	.+66     	; 0xad4 <vfprintf+0xca>
 a92:	27 fd       	sbrc	r18, 7
 a94:	27 c0       	rjmp	.+78     	; 0xae4 <vfprintf+0xda>
 a96:	30 ed       	ldi	r19, 0xD0	; 208
 a98:	38 0f       	add	r19, r24
 a9a:	3a 30       	cpi	r19, 0x0A	; 10
 a9c:	78 f4       	brcc	.+30     	; 0xabc <vfprintf+0xb2>
 a9e:	26 ff       	sbrs	r18, 6
 aa0:	06 c0       	rjmp	.+12     	; 0xaae <vfprintf+0xa4>
 aa2:	fa e0       	ldi	r31, 0x0A	; 10
 aa4:	5f 9e       	mul	r5, r31
 aa6:	30 0d       	add	r19, r0
 aa8:	11 24       	eor	r1, r1
 aaa:	53 2e       	mov	r5, r19
 aac:	13 c0       	rjmp	.+38     	; 0xad4 <vfprintf+0xca>
 aae:	8a e0       	ldi	r24, 0x0A	; 10
 ab0:	38 9e       	mul	r3, r24
 ab2:	30 0d       	add	r19, r0
 ab4:	11 24       	eor	r1, r1
 ab6:	33 2e       	mov	r3, r19
 ab8:	20 62       	ori	r18, 0x20	; 32
 aba:	0c c0       	rjmp	.+24     	; 0xad4 <vfprintf+0xca>
 abc:	8e 32       	cpi	r24, 0x2E	; 46
 abe:	21 f4       	brne	.+8      	; 0xac8 <vfprintf+0xbe>
 ac0:	26 fd       	sbrc	r18, 6
 ac2:	6b c1       	rjmp	.+726    	; 0xd9a <vfprintf+0x390>
 ac4:	20 64       	ori	r18, 0x40	; 64
 ac6:	06 c0       	rjmp	.+12     	; 0xad4 <vfprintf+0xca>
 ac8:	8c 36       	cpi	r24, 0x6C	; 108
 aca:	11 f4       	brne	.+4      	; 0xad0 <vfprintf+0xc6>
 acc:	20 68       	ori	r18, 0x80	; 128
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <vfprintf+0xca>
 ad0:	88 36       	cpi	r24, 0x68	; 104
 ad2:	41 f4       	brne	.+16     	; 0xae4 <vfprintf+0xda>
 ad4:	f6 01       	movw	r30, r12
 ad6:	93 fd       	sbrc	r25, 3
 ad8:	85 91       	lpm	r24, Z+
 ada:	93 ff       	sbrs	r25, 3
 adc:	81 91       	ld	r24, Z+
 ade:	6f 01       	movw	r12, r30
 ae0:	81 11       	cpse	r24, r1
 ae2:	c1 cf       	rjmp	.-126    	; 0xa66 <vfprintf+0x5c>
 ae4:	98 2f       	mov	r25, r24
 ae6:	9f 7d       	andi	r25, 0xDF	; 223
 ae8:	95 54       	subi	r25, 0x45	; 69
 aea:	93 30       	cpi	r25, 0x03	; 3
 aec:	28 f4       	brcc	.+10     	; 0xaf8 <vfprintf+0xee>
 aee:	0c 5f       	subi	r16, 0xFC	; 252
 af0:	1f 4f       	sbci	r17, 0xFF	; 255
 af2:	ff e3       	ldi	r31, 0x3F	; 63
 af4:	f9 83       	std	Y+1, r31	; 0x01
 af6:	0d c0       	rjmp	.+26     	; 0xb12 <vfprintf+0x108>
 af8:	83 36       	cpi	r24, 0x63	; 99
 afa:	31 f0       	breq	.+12     	; 0xb08 <vfprintf+0xfe>
 afc:	83 37       	cpi	r24, 0x73	; 115
 afe:	71 f0       	breq	.+28     	; 0xb1c <vfprintf+0x112>
 b00:	83 35       	cpi	r24, 0x53	; 83
 b02:	09 f0       	breq	.+2      	; 0xb06 <vfprintf+0xfc>
 b04:	5b c0       	rjmp	.+182    	; 0xbbc <vfprintf+0x1b2>
 b06:	22 c0       	rjmp	.+68     	; 0xb4c <vfprintf+0x142>
 b08:	f8 01       	movw	r30, r16
 b0a:	80 81       	ld	r24, Z
 b0c:	89 83       	std	Y+1, r24	; 0x01
 b0e:	0e 5f       	subi	r16, 0xFE	; 254
 b10:	1f 4f       	sbci	r17, 0xFF	; 255
 b12:	44 24       	eor	r4, r4
 b14:	43 94       	inc	r4
 b16:	51 2c       	mov	r5, r1
 b18:	54 01       	movw	r10, r8
 b1a:	15 c0       	rjmp	.+42     	; 0xb46 <vfprintf+0x13c>
 b1c:	38 01       	movw	r6, r16
 b1e:	f2 e0       	ldi	r31, 0x02	; 2
 b20:	6f 0e       	add	r6, r31
 b22:	71 1c       	adc	r7, r1
 b24:	f8 01       	movw	r30, r16
 b26:	a0 80       	ld	r10, Z
 b28:	b1 80       	ldd	r11, Z+1	; 0x01
 b2a:	26 ff       	sbrs	r18, 6
 b2c:	03 c0       	rjmp	.+6      	; 0xb34 <vfprintf+0x12a>
 b2e:	65 2d       	mov	r22, r5
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <vfprintf+0x12e>
 b34:	6f ef       	ldi	r22, 0xFF	; 255
 b36:	7f ef       	ldi	r23, 0xFF	; 255
 b38:	c5 01       	movw	r24, r10
 b3a:	2c 87       	std	Y+12, r18	; 0x0c
 b3c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <strnlen>
 b40:	2c 01       	movw	r4, r24
 b42:	83 01       	movw	r16, r6
 b44:	2c 85       	ldd	r18, Y+12	; 0x0c
 b46:	2f 77       	andi	r18, 0x7F	; 127
 b48:	22 2e       	mov	r2, r18
 b4a:	17 c0       	rjmp	.+46     	; 0xb7a <vfprintf+0x170>
 b4c:	38 01       	movw	r6, r16
 b4e:	f2 e0       	ldi	r31, 0x02	; 2
 b50:	6f 0e       	add	r6, r31
 b52:	71 1c       	adc	r7, r1
 b54:	f8 01       	movw	r30, r16
 b56:	a0 80       	ld	r10, Z
 b58:	b1 80       	ldd	r11, Z+1	; 0x01
 b5a:	26 ff       	sbrs	r18, 6
 b5c:	03 c0       	rjmp	.+6      	; 0xb64 <vfprintf+0x15a>
 b5e:	65 2d       	mov	r22, r5
 b60:	70 e0       	ldi	r23, 0x00	; 0
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <vfprintf+0x15e>
 b64:	6f ef       	ldi	r22, 0xFF	; 255
 b66:	7f ef       	ldi	r23, 0xFF	; 255
 b68:	c5 01       	movw	r24, r10
 b6a:	2c 87       	std	Y+12, r18	; 0x0c
 b6c:	0e 94 d7 06 	call	0xdae	; 0xdae <strnlen_P>
 b70:	2c 01       	movw	r4, r24
 b72:	2c 85       	ldd	r18, Y+12	; 0x0c
 b74:	20 68       	ori	r18, 0x80	; 128
 b76:	22 2e       	mov	r2, r18
 b78:	83 01       	movw	r16, r6
 b7a:	23 fc       	sbrc	r2, 3
 b7c:	1b c0       	rjmp	.+54     	; 0xbb4 <vfprintf+0x1aa>
 b7e:	83 2d       	mov	r24, r3
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	48 16       	cp	r4, r24
 b84:	59 06       	cpc	r5, r25
 b86:	b0 f4       	brcc	.+44     	; 0xbb4 <vfprintf+0x1aa>
 b88:	b7 01       	movw	r22, r14
 b8a:	80 e2       	ldi	r24, 0x20	; 32
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 b92:	3a 94       	dec	r3
 b94:	f4 cf       	rjmp	.-24     	; 0xb7e <vfprintf+0x174>
 b96:	f5 01       	movw	r30, r10
 b98:	27 fc       	sbrc	r2, 7
 b9a:	85 91       	lpm	r24, Z+
 b9c:	27 fe       	sbrs	r2, 7
 b9e:	81 91       	ld	r24, Z+
 ba0:	5f 01       	movw	r10, r30
 ba2:	b7 01       	movw	r22, r14
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 baa:	31 10       	cpse	r3, r1
 bac:	3a 94       	dec	r3
 bae:	f1 e0       	ldi	r31, 0x01	; 1
 bb0:	4f 1a       	sub	r4, r31
 bb2:	51 08       	sbc	r5, r1
 bb4:	41 14       	cp	r4, r1
 bb6:	51 04       	cpc	r5, r1
 bb8:	71 f7       	brne	.-36     	; 0xb96 <vfprintf+0x18c>
 bba:	e5 c0       	rjmp	.+458    	; 0xd86 <vfprintf+0x37c>
 bbc:	84 36       	cpi	r24, 0x64	; 100
 bbe:	11 f0       	breq	.+4      	; 0xbc4 <vfprintf+0x1ba>
 bc0:	89 36       	cpi	r24, 0x69	; 105
 bc2:	39 f5       	brne	.+78     	; 0xc12 <vfprintf+0x208>
 bc4:	f8 01       	movw	r30, r16
 bc6:	27 ff       	sbrs	r18, 7
 bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <vfprintf+0x1ce>
 bca:	60 81       	ld	r22, Z
 bcc:	71 81       	ldd	r23, Z+1	; 0x01
 bce:	82 81       	ldd	r24, Z+2	; 0x02
 bd0:	93 81       	ldd	r25, Z+3	; 0x03
 bd2:	0c 5f       	subi	r16, 0xFC	; 252
 bd4:	1f 4f       	sbci	r17, 0xFF	; 255
 bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <vfprintf+0x1de>
 bd8:	60 81       	ld	r22, Z
 bda:	71 81       	ldd	r23, Z+1	; 0x01
 bdc:	88 27       	eor	r24, r24
 bde:	77 fd       	sbrc	r23, 7
 be0:	80 95       	com	r24
 be2:	98 2f       	mov	r25, r24
 be4:	0e 5f       	subi	r16, 0xFE	; 254
 be6:	1f 4f       	sbci	r17, 0xFF	; 255
 be8:	2f 76       	andi	r18, 0x6F	; 111
 bea:	b2 2e       	mov	r11, r18
 bec:	97 ff       	sbrs	r25, 7
 bee:	09 c0       	rjmp	.+18     	; 0xc02 <vfprintf+0x1f8>
 bf0:	90 95       	com	r25
 bf2:	80 95       	com	r24
 bf4:	70 95       	com	r23
 bf6:	61 95       	neg	r22
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	8f 4f       	sbci	r24, 0xFF	; 255
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	20 68       	ori	r18, 0x80	; 128
 c00:	b2 2e       	mov	r11, r18
 c02:	2a e0       	ldi	r18, 0x0A	; 10
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	a4 01       	movw	r20, r8
 c08:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__ultoa_invert>
 c0c:	a8 2e       	mov	r10, r24
 c0e:	a8 18       	sub	r10, r8
 c10:	44 c0       	rjmp	.+136    	; 0xc9a <vfprintf+0x290>
 c12:	85 37       	cpi	r24, 0x75	; 117
 c14:	29 f4       	brne	.+10     	; 0xc20 <vfprintf+0x216>
 c16:	2f 7e       	andi	r18, 0xEF	; 239
 c18:	b2 2e       	mov	r11, r18
 c1a:	2a e0       	ldi	r18, 0x0A	; 10
 c1c:	30 e0       	ldi	r19, 0x00	; 0
 c1e:	25 c0       	rjmp	.+74     	; 0xc6a <vfprintf+0x260>
 c20:	f2 2f       	mov	r31, r18
 c22:	f9 7f       	andi	r31, 0xF9	; 249
 c24:	bf 2e       	mov	r11, r31
 c26:	8f 36       	cpi	r24, 0x6F	; 111
 c28:	c1 f0       	breq	.+48     	; 0xc5a <vfprintf+0x250>
 c2a:	18 f4       	brcc	.+6      	; 0xc32 <vfprintf+0x228>
 c2c:	88 35       	cpi	r24, 0x58	; 88
 c2e:	79 f0       	breq	.+30     	; 0xc4e <vfprintf+0x244>
 c30:	b4 c0       	rjmp	.+360    	; 0xd9a <vfprintf+0x390>
 c32:	80 37       	cpi	r24, 0x70	; 112
 c34:	19 f0       	breq	.+6      	; 0xc3c <vfprintf+0x232>
 c36:	88 37       	cpi	r24, 0x78	; 120
 c38:	21 f0       	breq	.+8      	; 0xc42 <vfprintf+0x238>
 c3a:	af c0       	rjmp	.+350    	; 0xd9a <vfprintf+0x390>
 c3c:	2f 2f       	mov	r18, r31
 c3e:	20 61       	ori	r18, 0x10	; 16
 c40:	b2 2e       	mov	r11, r18
 c42:	b4 fe       	sbrs	r11, 4
 c44:	0d c0       	rjmp	.+26     	; 0xc60 <vfprintf+0x256>
 c46:	8b 2d       	mov	r24, r11
 c48:	84 60       	ori	r24, 0x04	; 4
 c4a:	b8 2e       	mov	r11, r24
 c4c:	09 c0       	rjmp	.+18     	; 0xc60 <vfprintf+0x256>
 c4e:	24 ff       	sbrs	r18, 4
 c50:	0a c0       	rjmp	.+20     	; 0xc66 <vfprintf+0x25c>
 c52:	9f 2f       	mov	r25, r31
 c54:	96 60       	ori	r25, 0x06	; 6
 c56:	b9 2e       	mov	r11, r25
 c58:	06 c0       	rjmp	.+12     	; 0xc66 <vfprintf+0x25c>
 c5a:	28 e0       	ldi	r18, 0x08	; 8
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	05 c0       	rjmp	.+10     	; 0xc6a <vfprintf+0x260>
 c60:	20 e1       	ldi	r18, 0x10	; 16
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	02 c0       	rjmp	.+4      	; 0xc6a <vfprintf+0x260>
 c66:	20 e1       	ldi	r18, 0x10	; 16
 c68:	32 e0       	ldi	r19, 0x02	; 2
 c6a:	f8 01       	movw	r30, r16
 c6c:	b7 fe       	sbrs	r11, 7
 c6e:	07 c0       	rjmp	.+14     	; 0xc7e <vfprintf+0x274>
 c70:	60 81       	ld	r22, Z
 c72:	71 81       	ldd	r23, Z+1	; 0x01
 c74:	82 81       	ldd	r24, Z+2	; 0x02
 c76:	93 81       	ldd	r25, Z+3	; 0x03
 c78:	0c 5f       	subi	r16, 0xFC	; 252
 c7a:	1f 4f       	sbci	r17, 0xFF	; 255
 c7c:	06 c0       	rjmp	.+12     	; 0xc8a <vfprintf+0x280>
 c7e:	60 81       	ld	r22, Z
 c80:	71 81       	ldd	r23, Z+1	; 0x01
 c82:	80 e0       	ldi	r24, 0x00	; 0
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	0e 5f       	subi	r16, 0xFE	; 254
 c88:	1f 4f       	sbci	r17, 0xFF	; 255
 c8a:	a4 01       	movw	r20, r8
 c8c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__ultoa_invert>
 c90:	a8 2e       	mov	r10, r24
 c92:	a8 18       	sub	r10, r8
 c94:	fb 2d       	mov	r31, r11
 c96:	ff 77       	andi	r31, 0x7F	; 127
 c98:	bf 2e       	mov	r11, r31
 c9a:	b6 fe       	sbrs	r11, 6
 c9c:	0b c0       	rjmp	.+22     	; 0xcb4 <vfprintf+0x2aa>
 c9e:	2b 2d       	mov	r18, r11
 ca0:	2e 7f       	andi	r18, 0xFE	; 254
 ca2:	a5 14       	cp	r10, r5
 ca4:	50 f4       	brcc	.+20     	; 0xcba <vfprintf+0x2b0>
 ca6:	b4 fe       	sbrs	r11, 4
 ca8:	0a c0       	rjmp	.+20     	; 0xcbe <vfprintf+0x2b4>
 caa:	b2 fc       	sbrc	r11, 2
 cac:	08 c0       	rjmp	.+16     	; 0xcbe <vfprintf+0x2b4>
 cae:	2b 2d       	mov	r18, r11
 cb0:	2e 7e       	andi	r18, 0xEE	; 238
 cb2:	05 c0       	rjmp	.+10     	; 0xcbe <vfprintf+0x2b4>
 cb4:	7a 2c       	mov	r7, r10
 cb6:	2b 2d       	mov	r18, r11
 cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <vfprintf+0x2b6>
 cba:	7a 2c       	mov	r7, r10
 cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <vfprintf+0x2b6>
 cbe:	75 2c       	mov	r7, r5
 cc0:	24 ff       	sbrs	r18, 4
 cc2:	0d c0       	rjmp	.+26     	; 0xcde <vfprintf+0x2d4>
 cc4:	fe 01       	movw	r30, r28
 cc6:	ea 0d       	add	r30, r10
 cc8:	f1 1d       	adc	r31, r1
 cca:	80 81       	ld	r24, Z
 ccc:	80 33       	cpi	r24, 0x30	; 48
 cce:	11 f4       	brne	.+4      	; 0xcd4 <vfprintf+0x2ca>
 cd0:	29 7e       	andi	r18, 0xE9	; 233
 cd2:	09 c0       	rjmp	.+18     	; 0xce6 <vfprintf+0x2dc>
 cd4:	22 ff       	sbrs	r18, 2
 cd6:	06 c0       	rjmp	.+12     	; 0xce4 <vfprintf+0x2da>
 cd8:	73 94       	inc	r7
 cda:	73 94       	inc	r7
 cdc:	04 c0       	rjmp	.+8      	; 0xce6 <vfprintf+0x2dc>
 cde:	82 2f       	mov	r24, r18
 ce0:	86 78       	andi	r24, 0x86	; 134
 ce2:	09 f0       	breq	.+2      	; 0xce6 <vfprintf+0x2dc>
 ce4:	73 94       	inc	r7
 ce6:	23 fd       	sbrc	r18, 3
 ce8:	13 c0       	rjmp	.+38     	; 0xd10 <vfprintf+0x306>
 cea:	20 ff       	sbrs	r18, 0
 cec:	06 c0       	rjmp	.+12     	; 0xcfa <vfprintf+0x2f0>
 cee:	5a 2c       	mov	r5, r10
 cf0:	73 14       	cp	r7, r3
 cf2:	18 f4       	brcc	.+6      	; 0xcfa <vfprintf+0x2f0>
 cf4:	53 0c       	add	r5, r3
 cf6:	57 18       	sub	r5, r7
 cf8:	73 2c       	mov	r7, r3
 cfa:	73 14       	cp	r7, r3
 cfc:	68 f4       	brcc	.+26     	; 0xd18 <vfprintf+0x30e>
 cfe:	b7 01       	movw	r22, r14
 d00:	80 e2       	ldi	r24, 0x20	; 32
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	2c 87       	std	Y+12, r18	; 0x0c
 d06:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d0a:	73 94       	inc	r7
 d0c:	2c 85       	ldd	r18, Y+12	; 0x0c
 d0e:	f5 cf       	rjmp	.-22     	; 0xcfa <vfprintf+0x2f0>
 d10:	73 14       	cp	r7, r3
 d12:	10 f4       	brcc	.+4      	; 0xd18 <vfprintf+0x30e>
 d14:	37 18       	sub	r3, r7
 d16:	01 c0       	rjmp	.+2      	; 0xd1a <vfprintf+0x310>
 d18:	31 2c       	mov	r3, r1
 d1a:	24 ff       	sbrs	r18, 4
 d1c:	12 c0       	rjmp	.+36     	; 0xd42 <vfprintf+0x338>
 d1e:	b7 01       	movw	r22, r14
 d20:	80 e3       	ldi	r24, 0x30	; 48
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	2c 87       	std	Y+12, r18	; 0x0c
 d26:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d2a:	2c 85       	ldd	r18, Y+12	; 0x0c
 d2c:	22 ff       	sbrs	r18, 2
 d2e:	17 c0       	rjmp	.+46     	; 0xd5e <vfprintf+0x354>
 d30:	21 ff       	sbrs	r18, 1
 d32:	03 c0       	rjmp	.+6      	; 0xd3a <vfprintf+0x330>
 d34:	88 e5       	ldi	r24, 0x58	; 88
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x334>
 d3a:	88 e7       	ldi	r24, 0x78	; 120
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	b7 01       	movw	r22, r14
 d40:	0c c0       	rjmp	.+24     	; 0xd5a <vfprintf+0x350>
 d42:	82 2f       	mov	r24, r18
 d44:	86 78       	andi	r24, 0x86	; 134
 d46:	59 f0       	breq	.+22     	; 0xd5e <vfprintf+0x354>
 d48:	21 fd       	sbrc	r18, 1
 d4a:	02 c0       	rjmp	.+4      	; 0xd50 <vfprintf+0x346>
 d4c:	80 e2       	ldi	r24, 0x20	; 32
 d4e:	01 c0       	rjmp	.+2      	; 0xd52 <vfprintf+0x348>
 d50:	8b e2       	ldi	r24, 0x2B	; 43
 d52:	27 fd       	sbrc	r18, 7
 d54:	8d e2       	ldi	r24, 0x2D	; 45
 d56:	b7 01       	movw	r22, r14
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d5e:	a5 14       	cp	r10, r5
 d60:	38 f4       	brcc	.+14     	; 0xd70 <vfprintf+0x366>
 d62:	b7 01       	movw	r22, r14
 d64:	80 e3       	ldi	r24, 0x30	; 48
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d6c:	5a 94       	dec	r5
 d6e:	f7 cf       	rjmp	.-18     	; 0xd5e <vfprintf+0x354>
 d70:	aa 94       	dec	r10
 d72:	f4 01       	movw	r30, r8
 d74:	ea 0d       	add	r30, r10
 d76:	f1 1d       	adc	r31, r1
 d78:	80 81       	ld	r24, Z
 d7a:	b7 01       	movw	r22, r14
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d82:	a1 10       	cpse	r10, r1
 d84:	f5 cf       	rjmp	.-22     	; 0xd70 <vfprintf+0x366>
 d86:	33 20       	and	r3, r3
 d88:	09 f4       	brne	.+2      	; 0xd8c <vfprintf+0x382>
 d8a:	51 ce       	rjmp	.-862    	; 0xa2e <vfprintf+0x24>
 d8c:	b7 01       	movw	r22, r14
 d8e:	80 e2       	ldi	r24, 0x20	; 32
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d96:	3a 94       	dec	r3
 d98:	f6 cf       	rjmp	.-20     	; 0xd86 <vfprintf+0x37c>
 d9a:	f7 01       	movw	r30, r14
 d9c:	86 81       	ldd	r24, Z+6	; 0x06
 d9e:	97 81       	ldd	r25, Z+7	; 0x07
 da0:	02 c0       	rjmp	.+4      	; 0xda6 <vfprintf+0x39c>
 da2:	8f ef       	ldi	r24, 0xFF	; 255
 da4:	9f ef       	ldi	r25, 0xFF	; 255
 da6:	2c 96       	adiw	r28, 0x0c	; 12
 da8:	e2 e1       	ldi	r30, 0x12	; 18
 daa:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__epilogue_restores__>

00000dae <strnlen_P>:
 dae:	fc 01       	movw	r30, r24
 db0:	05 90       	lpm	r0, Z+
 db2:	61 50       	subi	r22, 0x01	; 1
 db4:	70 40       	sbci	r23, 0x00	; 0
 db6:	01 10       	cpse	r0, r1
 db8:	d8 f7       	brcc	.-10     	; 0xdb0 <strnlen_P+0x2>
 dba:	80 95       	com	r24
 dbc:	90 95       	com	r25
 dbe:	8e 0f       	add	r24, r30
 dc0:	9f 1f       	adc	r25, r31
 dc2:	08 95       	ret

00000dc4 <strnlen>:
 dc4:	fc 01       	movw	r30, r24
 dc6:	61 50       	subi	r22, 0x01	; 1
 dc8:	70 40       	sbci	r23, 0x00	; 0
 dca:	01 90       	ld	r0, Z+
 dcc:	01 10       	cpse	r0, r1
 dce:	d8 f7       	brcc	.-10     	; 0xdc6 <strnlen+0x2>
 dd0:	80 95       	com	r24
 dd2:	90 95       	com	r25
 dd4:	8e 0f       	add	r24, r30
 dd6:	9f 1f       	adc	r25, r31
 dd8:	08 95       	ret

00000dda <fputc>:
 dda:	0f 93       	push	r16
 ddc:	1f 93       	push	r17
 dde:	cf 93       	push	r28
 de0:	df 93       	push	r29
 de2:	18 2f       	mov	r17, r24
 de4:	09 2f       	mov	r16, r25
 de6:	eb 01       	movw	r28, r22
 de8:	8b 81       	ldd	r24, Y+3	; 0x03
 dea:	81 fd       	sbrc	r24, 1
 dec:	03 c0       	rjmp	.+6      	; 0xdf4 <fputc+0x1a>
 dee:	8f ef       	ldi	r24, 0xFF	; 255
 df0:	9f ef       	ldi	r25, 0xFF	; 255
 df2:	20 c0       	rjmp	.+64     	; 0xe34 <fputc+0x5a>
 df4:	82 ff       	sbrs	r24, 2
 df6:	10 c0       	rjmp	.+32     	; 0xe18 <fputc+0x3e>
 df8:	4e 81       	ldd	r20, Y+6	; 0x06
 dfa:	5f 81       	ldd	r21, Y+7	; 0x07
 dfc:	2c 81       	ldd	r18, Y+4	; 0x04
 dfe:	3d 81       	ldd	r19, Y+5	; 0x05
 e00:	42 17       	cp	r20, r18
 e02:	53 07       	cpc	r21, r19
 e04:	7c f4       	brge	.+30     	; 0xe24 <fputc+0x4a>
 e06:	e8 81       	ld	r30, Y
 e08:	f9 81       	ldd	r31, Y+1	; 0x01
 e0a:	9f 01       	movw	r18, r30
 e0c:	2f 5f       	subi	r18, 0xFF	; 255
 e0e:	3f 4f       	sbci	r19, 0xFF	; 255
 e10:	39 83       	std	Y+1, r19	; 0x01
 e12:	28 83       	st	Y, r18
 e14:	10 83       	st	Z, r17
 e16:	06 c0       	rjmp	.+12     	; 0xe24 <fputc+0x4a>
 e18:	e8 85       	ldd	r30, Y+8	; 0x08
 e1a:	f9 85       	ldd	r31, Y+9	; 0x09
 e1c:	81 2f       	mov	r24, r17
 e1e:	09 95       	icall
 e20:	89 2b       	or	r24, r25
 e22:	29 f7       	brne	.-54     	; 0xdee <fputc+0x14>
 e24:	2e 81       	ldd	r18, Y+6	; 0x06
 e26:	3f 81       	ldd	r19, Y+7	; 0x07
 e28:	2f 5f       	subi	r18, 0xFF	; 255
 e2a:	3f 4f       	sbci	r19, 0xFF	; 255
 e2c:	3f 83       	std	Y+7, r19	; 0x07
 e2e:	2e 83       	std	Y+6, r18	; 0x06
 e30:	81 2f       	mov	r24, r17
 e32:	90 2f       	mov	r25, r16
 e34:	df 91       	pop	r29
 e36:	cf 91       	pop	r28
 e38:	1f 91       	pop	r17
 e3a:	0f 91       	pop	r16
 e3c:	08 95       	ret

00000e3e <__ultoa_invert>:
 e3e:	fa 01       	movw	r30, r20
 e40:	aa 27       	eor	r26, r26
 e42:	28 30       	cpi	r18, 0x08	; 8
 e44:	51 f1       	breq	.+84     	; 0xe9a <__ultoa_invert+0x5c>
 e46:	20 31       	cpi	r18, 0x10	; 16
 e48:	81 f1       	breq	.+96     	; 0xeaa <__ultoa_invert+0x6c>
 e4a:	e8 94       	clt
 e4c:	6f 93       	push	r22
 e4e:	6e 7f       	andi	r22, 0xFE	; 254
 e50:	6e 5f       	subi	r22, 0xFE	; 254
 e52:	7f 4f       	sbci	r23, 0xFF	; 255
 e54:	8f 4f       	sbci	r24, 0xFF	; 255
 e56:	9f 4f       	sbci	r25, 0xFF	; 255
 e58:	af 4f       	sbci	r26, 0xFF	; 255
 e5a:	b1 e0       	ldi	r27, 0x01	; 1
 e5c:	3e d0       	rcall	.+124    	; 0xeda <__ultoa_invert+0x9c>
 e5e:	b4 e0       	ldi	r27, 0x04	; 4
 e60:	3c d0       	rcall	.+120    	; 0xeda <__ultoa_invert+0x9c>
 e62:	67 0f       	add	r22, r23
 e64:	78 1f       	adc	r23, r24
 e66:	89 1f       	adc	r24, r25
 e68:	9a 1f       	adc	r25, r26
 e6a:	a1 1d       	adc	r26, r1
 e6c:	68 0f       	add	r22, r24
 e6e:	79 1f       	adc	r23, r25
 e70:	8a 1f       	adc	r24, r26
 e72:	91 1d       	adc	r25, r1
 e74:	a1 1d       	adc	r26, r1
 e76:	6a 0f       	add	r22, r26
 e78:	71 1d       	adc	r23, r1
 e7a:	81 1d       	adc	r24, r1
 e7c:	91 1d       	adc	r25, r1
 e7e:	a1 1d       	adc	r26, r1
 e80:	20 d0       	rcall	.+64     	; 0xec2 <__ultoa_invert+0x84>
 e82:	09 f4       	brne	.+2      	; 0xe86 <__ultoa_invert+0x48>
 e84:	68 94       	set
 e86:	3f 91       	pop	r19
 e88:	2a e0       	ldi	r18, 0x0A	; 10
 e8a:	26 9f       	mul	r18, r22
 e8c:	11 24       	eor	r1, r1
 e8e:	30 19       	sub	r19, r0
 e90:	30 5d       	subi	r19, 0xD0	; 208
 e92:	31 93       	st	Z+, r19
 e94:	de f6       	brtc	.-74     	; 0xe4c <__ultoa_invert+0xe>
 e96:	cf 01       	movw	r24, r30
 e98:	08 95       	ret
 e9a:	46 2f       	mov	r20, r22
 e9c:	47 70       	andi	r20, 0x07	; 7
 e9e:	40 5d       	subi	r20, 0xD0	; 208
 ea0:	41 93       	st	Z+, r20
 ea2:	b3 e0       	ldi	r27, 0x03	; 3
 ea4:	0f d0       	rcall	.+30     	; 0xec4 <__ultoa_invert+0x86>
 ea6:	c9 f7       	brne	.-14     	; 0xe9a <__ultoa_invert+0x5c>
 ea8:	f6 cf       	rjmp	.-20     	; 0xe96 <__ultoa_invert+0x58>
 eaa:	46 2f       	mov	r20, r22
 eac:	4f 70       	andi	r20, 0x0F	; 15
 eae:	40 5d       	subi	r20, 0xD0	; 208
 eb0:	4a 33       	cpi	r20, 0x3A	; 58
 eb2:	18 f0       	brcs	.+6      	; 0xeba <__ultoa_invert+0x7c>
 eb4:	49 5d       	subi	r20, 0xD9	; 217
 eb6:	31 fd       	sbrc	r19, 1
 eb8:	40 52       	subi	r20, 0x20	; 32
 eba:	41 93       	st	Z+, r20
 ebc:	02 d0       	rcall	.+4      	; 0xec2 <__ultoa_invert+0x84>
 ebe:	a9 f7       	brne	.-22     	; 0xeaa <__ultoa_invert+0x6c>
 ec0:	ea cf       	rjmp	.-44     	; 0xe96 <__ultoa_invert+0x58>
 ec2:	b4 e0       	ldi	r27, 0x04	; 4
 ec4:	a6 95       	lsr	r26
 ec6:	97 95       	ror	r25
 ec8:	87 95       	ror	r24
 eca:	77 95       	ror	r23
 ecc:	67 95       	ror	r22
 ece:	ba 95       	dec	r27
 ed0:	c9 f7       	brne	.-14     	; 0xec4 <__ultoa_invert+0x86>
 ed2:	00 97       	sbiw	r24, 0x00	; 0
 ed4:	61 05       	cpc	r22, r1
 ed6:	71 05       	cpc	r23, r1
 ed8:	08 95       	ret
 eda:	9b 01       	movw	r18, r22
 edc:	ac 01       	movw	r20, r24
 ede:	0a 2e       	mov	r0, r26
 ee0:	06 94       	lsr	r0
 ee2:	57 95       	ror	r21
 ee4:	47 95       	ror	r20
 ee6:	37 95       	ror	r19
 ee8:	27 95       	ror	r18
 eea:	ba 95       	dec	r27
 eec:	c9 f7       	brne	.-14     	; 0xee0 <__ultoa_invert+0xa2>
 eee:	62 0f       	add	r22, r18
 ef0:	73 1f       	adc	r23, r19
 ef2:	84 1f       	adc	r24, r20
 ef4:	95 1f       	adc	r25, r21
 ef6:	a0 1d       	adc	r26, r0
 ef8:	08 95       	ret

00000efa <__prologue_saves__>:
 efa:	2f 92       	push	r2
 efc:	3f 92       	push	r3
 efe:	4f 92       	push	r4
 f00:	5f 92       	push	r5
 f02:	6f 92       	push	r6
 f04:	7f 92       	push	r7
 f06:	8f 92       	push	r8
 f08:	9f 92       	push	r9
 f0a:	af 92       	push	r10
 f0c:	bf 92       	push	r11
 f0e:	cf 92       	push	r12
 f10:	df 92       	push	r13
 f12:	ef 92       	push	r14
 f14:	ff 92       	push	r15
 f16:	0f 93       	push	r16
 f18:	1f 93       	push	r17
 f1a:	cf 93       	push	r28
 f1c:	df 93       	push	r29
 f1e:	cd b7       	in	r28, 0x3d	; 61
 f20:	de b7       	in	r29, 0x3e	; 62
 f22:	ca 1b       	sub	r28, r26
 f24:	db 0b       	sbc	r29, r27
 f26:	0f b6       	in	r0, 0x3f	; 63
 f28:	f8 94       	cli
 f2a:	de bf       	out	0x3e, r29	; 62
 f2c:	0f be       	out	0x3f, r0	; 63
 f2e:	cd bf       	out	0x3d, r28	; 61
 f30:	09 94       	ijmp

00000f32 <__epilogue_restores__>:
 f32:	2a 88       	ldd	r2, Y+18	; 0x12
 f34:	39 88       	ldd	r3, Y+17	; 0x11
 f36:	48 88       	ldd	r4, Y+16	; 0x10
 f38:	5f 84       	ldd	r5, Y+15	; 0x0f
 f3a:	6e 84       	ldd	r6, Y+14	; 0x0e
 f3c:	7d 84       	ldd	r7, Y+13	; 0x0d
 f3e:	8c 84       	ldd	r8, Y+12	; 0x0c
 f40:	9b 84       	ldd	r9, Y+11	; 0x0b
 f42:	aa 84       	ldd	r10, Y+10	; 0x0a
 f44:	b9 84       	ldd	r11, Y+9	; 0x09
 f46:	c8 84       	ldd	r12, Y+8	; 0x08
 f48:	df 80       	ldd	r13, Y+7	; 0x07
 f4a:	ee 80       	ldd	r14, Y+6	; 0x06
 f4c:	fd 80       	ldd	r15, Y+5	; 0x05
 f4e:	0c 81       	ldd	r16, Y+4	; 0x04
 f50:	1b 81       	ldd	r17, Y+3	; 0x03
 f52:	aa 81       	ldd	r26, Y+2	; 0x02
 f54:	b9 81       	ldd	r27, Y+1	; 0x01
 f56:	ce 0f       	add	r28, r30
 f58:	d1 1d       	adc	r29, r1
 f5a:	0f b6       	in	r0, 0x3f	; 63
 f5c:	f8 94       	cli
 f5e:	de bf       	out	0x3e, r29	; 62
 f60:	0f be       	out	0x3f, r0	; 63
 f62:	cd bf       	out	0x3d, r28	; 61
 f64:	ed 01       	movw	r28, r26
 f66:	08 95       	ret

00000f68 <_exit>:
 f68:	f8 94       	cli

00000f6a <__stop_program>:
 f6a:	ff cf       	rjmp	.-2      	; 0xf6a <__stop_program>
